{"ast":null,"code":"// @generated by Peggy 4.2.0.\n//\n// https://peggyjs.org/\n\nfunction rootNode(comment) {\n  return comment !== null ? {\n    comment,\n    variations: []\n  } : {\n    variations: []\n  };\n}\nfunction node(move, suffix, nag, comment, variations) {\n  const node = {\n    move,\n    variations\n  };\n  if (suffix) {\n    node.suffix = suffix;\n  }\n  if (nag) {\n    node.nag = nag;\n  }\n  if (comment !== null) {\n    node.comment = comment;\n  }\n  return node;\n}\nfunction lineToTree(...nodes) {\n  const [root, ...rest] = nodes;\n  let parent = root;\n  for (const child of rest) {\n    if (child !== null) {\n      parent.variations = [child, ...child.variations];\n      child.variations = [];\n      parent = child;\n    }\n  }\n  return root;\n}\nfunction pgn(headers, game) {\n  if (game.marker && game.marker.comment) {\n    let node = game.root;\n    while (true) {\n      const next = node.variations[0];\n      if (!next) {\n        node.comment = game.marker.comment;\n        break;\n      }\n      node = next;\n    }\n  }\n  return {\n    headers,\n    root: game.root,\n    result: (game.marker && game.marker.result) ?? undefined\n  };\n}\nfunction peg$subclass(child, parent) {\n  function C() {\n    this.constructor = child;\n  }\n  C.prototype = parent.prototype;\n  child.prototype = new C();\n}\nfunction peg$SyntaxError(message, expected, found, location) {\n  var self = Error.call(this, message);\n  // istanbul ignore next Check is a necessary evil to support older environments\n  if (Object.setPrototypeOf) {\n    Object.setPrototypeOf(self, peg$SyntaxError.prototype);\n  }\n  self.expected = expected;\n  self.found = found;\n  self.location = location;\n  self.name = \"SyntaxError\";\n  return self;\n}\npeg$subclass(peg$SyntaxError, Error);\nfunction peg$padEnd(str, targetLength, padString) {\n  padString = padString || \" \";\n  if (str.length > targetLength) {\n    return str;\n  }\n  targetLength -= str.length;\n  padString += padString.repeat(targetLength);\n  return str + padString.slice(0, targetLength);\n}\npeg$SyntaxError.prototype.format = function (sources) {\n  var str = \"Error: \" + this.message;\n  if (this.location) {\n    var src = null;\n    var k;\n    for (k = 0; k < sources.length; k++) {\n      if (sources[k].source === this.location.source) {\n        src = sources[k].text.split(/\\r\\n|\\n|\\r/g);\n        break;\n      }\n    }\n    var s = this.location.start;\n    var offset_s = this.location.source && typeof this.location.source.offset === \"function\" ? this.location.source.offset(s) : s;\n    var loc = this.location.source + \":\" + offset_s.line + \":\" + offset_s.column;\n    if (src) {\n      var e = this.location.end;\n      var filler = peg$padEnd(\"\", offset_s.line.toString().length, ' ');\n      var line = src[s.line - 1];\n      var last = s.line === e.line ? e.column : line.length + 1;\n      var hatLen = last - s.column || 1;\n      str += \"\\n --> \" + loc + \"\\n\" + filler + \" |\\n\" + offset_s.line + \" | \" + line + \"\\n\" + filler + \" | \" + peg$padEnd(\"\", s.column - 1, ' ') + peg$padEnd(\"\", hatLen, \"^\");\n    } else {\n      str += \"\\n at \" + loc;\n    }\n  }\n  return str;\n};\npeg$SyntaxError.buildMessage = function (expected, found) {\n  var DESCRIBE_EXPECTATION_FNS = {\n    literal: function (expectation) {\n      return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n    },\n    class: function (expectation) {\n      var escapedParts = expectation.parts.map(function (part) {\n        return Array.isArray(part) ? classEscape(part[0]) + \"-\" + classEscape(part[1]) : classEscape(part);\n      });\n      return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts.join(\"\") + \"]\";\n    },\n    any: function () {\n      return \"any character\";\n    },\n    end: function () {\n      return \"end of input\";\n    },\n    other: function (expectation) {\n      return expectation.description;\n    }\n  };\n  function hex(ch) {\n    return ch.charCodeAt(0).toString(16).toUpperCase();\n  }\n  function literalEscape(s) {\n    return s.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, \"\\\\\\\"\").replace(/\\0/g, \"\\\\0\").replace(/\\t/g, \"\\\\t\").replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\\\\r\").replace(/[\\x00-\\x0F]/g, function (ch) {\n      return \"\\\\x0\" + hex(ch);\n    }).replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function (ch) {\n      return \"\\\\x\" + hex(ch);\n    });\n  }\n  function classEscape(s) {\n    return s.replace(/\\\\/g, \"\\\\\\\\\").replace(/\\]/g, \"\\\\]\").replace(/\\^/g, \"\\\\^\").replace(/-/g, \"\\\\-\").replace(/\\0/g, \"\\\\0\").replace(/\\t/g, \"\\\\t\").replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\\\\r\").replace(/[\\x00-\\x0F]/g, function (ch) {\n      return \"\\\\x0\" + hex(ch);\n    }).replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function (ch) {\n      return \"\\\\x\" + hex(ch);\n    });\n  }\n  function describeExpectation(expectation) {\n    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n  }\n  function describeExpected(expected) {\n    var descriptions = expected.map(describeExpectation);\n    var i, j;\n    descriptions.sort();\n    if (descriptions.length > 0) {\n      for (i = 1, j = 1; i < descriptions.length; i++) {\n        if (descriptions[i - 1] !== descriptions[i]) {\n          descriptions[j] = descriptions[i];\n          j++;\n        }\n      }\n      descriptions.length = j;\n    }\n    switch (descriptions.length) {\n      case 1:\n        return descriptions[0];\n      case 2:\n        return descriptions[0] + \" or \" + descriptions[1];\n      default:\n        return descriptions.slice(0, -1).join(\", \") + \", or \" + descriptions[descriptions.length - 1];\n    }\n  }\n  function describeFound(found) {\n    return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n  }\n  return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n};\nfunction peg$parse(input, options) {\n  options = options !== undefined ? options : {};\n  var peg$FAILED = {};\n  var peg$source = options.grammarSource;\n  var peg$startRuleFunctions = {\n    pgn: peg$parsepgn\n  };\n  var peg$startRuleFunction = peg$parsepgn;\n  var peg$c0 = \"[\";\n  var peg$c1 = \"\\\"\";\n  var peg$c2 = \"]\";\n  var peg$c3 = \".\";\n  var peg$c4 = \"O-O-O\";\n  var peg$c5 = \"O-O\";\n  var peg$c6 = \"0-0-0\";\n  var peg$c7 = \"0-0\";\n  var peg$c8 = \"$\";\n  var peg$c9 = \"{\";\n  var peg$c10 = \"}\";\n  var peg$c11 = \";\";\n  var peg$c12 = \"(\";\n  var peg$c13 = \")\";\n  var peg$c14 = \"1-0\";\n  var peg$c15 = \"0-1\";\n  var peg$c16 = \"1/2-1/2\";\n  var peg$c17 = \"*\";\n  var peg$r0 = /^[a-zA-Z]/;\n  var peg$r1 = /^[^\"]/;\n  var peg$r2 = /^[0-9]/;\n  var peg$r3 = /^[.]/;\n  var peg$r4 = /^[a-zA-Z1-8\\-=]/;\n  var peg$r5 = /^[+#]/;\n  var peg$r6 = /^[!?]/;\n  var peg$r7 = /^[^}]/;\n  var peg$r8 = /^[^\\r\\n]/;\n  var peg$r9 = /^[ \\t\\r\\n]/;\n  var peg$e0 = peg$otherExpectation(\"tag pair\");\n  var peg$e1 = peg$literalExpectation(\"[\", false);\n  var peg$e2 = peg$literalExpectation(\"\\\"\", false);\n  var peg$e3 = peg$literalExpectation(\"]\", false);\n  var peg$e4 = peg$otherExpectation(\"tag name\");\n  var peg$e5 = peg$classExpectation([[\"a\", \"z\"], [\"A\", \"Z\"]], false, false);\n  var peg$e6 = peg$otherExpectation(\"tag value\");\n  var peg$e7 = peg$classExpectation([\"\\\"\"], true, false);\n  var peg$e8 = peg$otherExpectation(\"move number\");\n  var peg$e9 = peg$classExpectation([[\"0\", \"9\"]], false, false);\n  var peg$e10 = peg$literalExpectation(\".\", false);\n  var peg$e11 = peg$classExpectation([\".\"], false, false);\n  var peg$e12 = peg$otherExpectation(\"standard algebraic notation\");\n  var peg$e13 = peg$literalExpectation(\"O-O-O\", false);\n  var peg$e14 = peg$literalExpectation(\"O-O\", false);\n  var peg$e15 = peg$literalExpectation(\"0-0-0\", false);\n  var peg$e16 = peg$literalExpectation(\"0-0\", false);\n  var peg$e17 = peg$classExpectation([[\"a\", \"z\"], [\"A\", \"Z\"], [\"1\", \"8\"], \"-\", \"=\"], false, false);\n  var peg$e18 = peg$classExpectation([\"+\", \"#\"], false, false);\n  var peg$e19 = peg$otherExpectation(\"suffix annotation\");\n  var peg$e20 = peg$classExpectation([\"!\", \"?\"], false, false);\n  var peg$e21 = peg$otherExpectation(\"NAG\");\n  var peg$e22 = peg$literalExpectation(\"$\", false);\n  var peg$e23 = peg$otherExpectation(\"brace comment\");\n  var peg$e24 = peg$literalExpectation(\"{\", false);\n  var peg$e25 = peg$classExpectation([\"}\"], true, false);\n  var peg$e26 = peg$literalExpectation(\"}\", false);\n  var peg$e27 = peg$otherExpectation(\"rest of line comment\");\n  var peg$e28 = peg$literalExpectation(\";\", false);\n  var peg$e29 = peg$classExpectation([\"\\r\", \"\\n\"], true, false);\n  var peg$e30 = peg$otherExpectation(\"variation\");\n  var peg$e31 = peg$literalExpectation(\"(\", false);\n  var peg$e32 = peg$literalExpectation(\")\", false);\n  var peg$e33 = peg$otherExpectation(\"game termination marker\");\n  var peg$e34 = peg$literalExpectation(\"1-0\", false);\n  var peg$e35 = peg$literalExpectation(\"0-1\", false);\n  var peg$e36 = peg$literalExpectation(\"1/2-1/2\", false);\n  var peg$e37 = peg$literalExpectation(\"*\", false);\n  var peg$e38 = peg$otherExpectation(\"whitespace\");\n  var peg$e39 = peg$classExpectation([\" \", \"\\t\", \"\\r\", \"\\n\"], false, false);\n  var peg$f0 = function (headers, game) {\n    return pgn(headers, game);\n  };\n  var peg$f1 = function (tagPairs) {\n    return Object.fromEntries(tagPairs);\n  };\n  var peg$f2 = function (tagName, tagValue) {\n    return [tagName, tagValue];\n  };\n  var peg$f3 = function (root, marker) {\n    return {\n      root,\n      marker\n    };\n  };\n  var peg$f4 = function (comment, moves) {\n    return lineToTree(rootNode(comment), ...moves.flat());\n  };\n  var peg$f5 = function (san, suffix, nag, comment, variations) {\n    return node(san, suffix, nag, comment, variations);\n  };\n  var peg$f6 = function (nag) {\n    return nag;\n  };\n  var peg$f7 = function (comment) {\n    return comment.replace(/[\\r\\n]+/g, \" \");\n  };\n  var peg$f8 = function (comment) {\n    return comment.trim();\n  };\n  var peg$f9 = function (line) {\n    return line;\n  };\n  var peg$f10 = function (result, comment) {\n    return {\n      result,\n      comment\n    };\n  };\n  var peg$currPos = options.peg$currPos | 0;\n  var peg$posDetailsCache = [{\n    line: 1,\n    column: 1\n  }];\n  var peg$maxFailPos = peg$currPos;\n  var peg$maxFailExpected = options.peg$maxFailExpected || [];\n  var peg$silentFails = options.peg$silentFails | 0;\n  var peg$result;\n  if (options.startRule) {\n    if (!(options.startRule in peg$startRuleFunctions)) {\n      throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n    }\n    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n  }\n  function peg$literalExpectation(text, ignoreCase) {\n    return {\n      type: \"literal\",\n      text: text,\n      ignoreCase: ignoreCase\n    };\n  }\n  function peg$classExpectation(parts, inverted, ignoreCase) {\n    return {\n      type: \"class\",\n      parts: parts,\n      inverted: inverted,\n      ignoreCase: ignoreCase\n    };\n  }\n  function peg$endExpectation() {\n    return {\n      type: \"end\"\n    };\n  }\n  function peg$otherExpectation(description) {\n    return {\n      type: \"other\",\n      description: description\n    };\n  }\n  function peg$computePosDetails(pos) {\n    var details = peg$posDetailsCache[pos];\n    var p;\n    if (details) {\n      return details;\n    } else {\n      if (pos >= peg$posDetailsCache.length) {\n        p = peg$posDetailsCache.length - 1;\n      } else {\n        p = pos;\n        while (!peg$posDetailsCache[--p]) {}\n      }\n      details = peg$posDetailsCache[p];\n      details = {\n        line: details.line,\n        column: details.column\n      };\n      while (p < pos) {\n        if (input.charCodeAt(p) === 10) {\n          details.line++;\n          details.column = 1;\n        } else {\n          details.column++;\n        }\n        p++;\n      }\n      peg$posDetailsCache[pos] = details;\n      return details;\n    }\n  }\n  function peg$computeLocation(startPos, endPos, offset) {\n    var startPosDetails = peg$computePosDetails(startPos);\n    var endPosDetails = peg$computePosDetails(endPos);\n    var res = {\n      source: peg$source,\n      start: {\n        offset: startPos,\n        line: startPosDetails.line,\n        column: startPosDetails.column\n      },\n      end: {\n        offset: endPos,\n        line: endPosDetails.line,\n        column: endPosDetails.column\n      }\n    };\n    return res;\n  }\n  function peg$fail(expected) {\n    if (peg$currPos < peg$maxFailPos) {\n      return;\n    }\n    if (peg$currPos > peg$maxFailPos) {\n      peg$maxFailPos = peg$currPos;\n      peg$maxFailExpected = [];\n    }\n    peg$maxFailExpected.push(expected);\n  }\n  function peg$buildStructuredError(expected, found, location) {\n    return new peg$SyntaxError(peg$SyntaxError.buildMessage(expected, found), expected, found, location);\n  }\n  function peg$parsepgn() {\n    var s0, s1, s2;\n    s0 = peg$currPos;\n    s1 = peg$parsetagPairSection();\n    s2 = peg$parsemoveTextSection();\n    s0 = peg$f0(s1, s2);\n    return s0;\n  }\n  function peg$parsetagPairSection() {\n    var s0, s1, s2;\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$parsetagPair();\n    while (s2 !== peg$FAILED) {\n      s1.push(s2);\n      s2 = peg$parsetagPair();\n    }\n    s2 = peg$parse_();\n    s0 = peg$f1(s1);\n    return s0;\n  }\n  function peg$parsetagPair() {\n    var s0, s2, s4, s6, s7, s8, s10;\n    peg$silentFails++;\n    s0 = peg$currPos;\n    peg$parse_();\n    if (input.charCodeAt(peg$currPos) === 91) {\n      s2 = peg$c0;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) {\n        peg$fail(peg$e1);\n      }\n    }\n    if (s2 !== peg$FAILED) {\n      peg$parse_();\n      s4 = peg$parsetagName();\n      if (s4 !== peg$FAILED) {\n        peg$parse_();\n        if (input.charCodeAt(peg$currPos) === 34) {\n          s6 = peg$c1;\n          peg$currPos++;\n        } else {\n          s6 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e2);\n          }\n        }\n        if (s6 !== peg$FAILED) {\n          s7 = peg$parsetagValue();\n          if (input.charCodeAt(peg$currPos) === 34) {\n            s8 = peg$c1;\n            peg$currPos++;\n          } else {\n            s8 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$e2);\n            }\n          }\n          if (s8 !== peg$FAILED) {\n            peg$parse_();\n            if (input.charCodeAt(peg$currPos) === 93) {\n              s10 = peg$c2;\n              peg$currPos++;\n            } else {\n              s10 = peg$FAILED;\n              if (peg$silentFails === 0) {\n                peg$fail(peg$e3);\n              }\n            }\n            if (s10 !== peg$FAILED) {\n              s0 = peg$f2(s4, s7);\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      if (peg$silentFails === 0) {\n        peg$fail(peg$e0);\n      }\n    }\n    return s0;\n  }\n  function peg$parsetagName() {\n    var s0, s1, s2;\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = input.charAt(peg$currPos);\n    if (peg$r0.test(s2)) {\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) {\n        peg$fail(peg$e5);\n      }\n    }\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = input.charAt(peg$currPos);\n        if (peg$r0.test(s2)) {\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e5);\n          }\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      s0 = input.substring(s0, peg$currPos);\n    } else {\n      s0 = s1;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) {\n        peg$fail(peg$e4);\n      }\n    }\n    return s0;\n  }\n  function peg$parsetagValue() {\n    var s0, s1, s2;\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = input.charAt(peg$currPos);\n    if (peg$r1.test(s2)) {\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) {\n        peg$fail(peg$e7);\n      }\n    }\n    while (s2 !== peg$FAILED) {\n      s1.push(s2);\n      s2 = input.charAt(peg$currPos);\n      if (peg$r1.test(s2)) {\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) {\n          peg$fail(peg$e7);\n        }\n      }\n    }\n    s0 = input.substring(s0, peg$currPos);\n    peg$silentFails--;\n    s1 = peg$FAILED;\n    if (peg$silentFails === 0) {\n      peg$fail(peg$e6);\n    }\n    return s0;\n  }\n  function peg$parsemoveTextSection() {\n    var s0, s1, s3;\n    s0 = peg$currPos;\n    s1 = peg$parseline();\n    peg$parse_();\n    s3 = peg$parsegameTerminationMarker();\n    if (s3 === peg$FAILED) {\n      s3 = null;\n    }\n    peg$parse_();\n    s0 = peg$f3(s1, s3);\n    return s0;\n  }\n  function peg$parseline() {\n    var s0, s1, s2, s3;\n    s0 = peg$currPos;\n    s1 = peg$parsecomment();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    s2 = [];\n    s3 = peg$parsemove();\n    while (s3 !== peg$FAILED) {\n      s2.push(s3);\n      s3 = peg$parsemove();\n    }\n    s0 = peg$f4(s1, s2);\n    return s0;\n  }\n  function peg$parsemove() {\n    var s0, s4, s5, s6, s7, s8, s9, s10;\n    s0 = peg$currPos;\n    peg$parse_();\n    peg$parsemoveNumber();\n    peg$parse_();\n    s4 = peg$parsesan();\n    if (s4 !== peg$FAILED) {\n      s5 = peg$parsesuffixAnnotation();\n      if (s5 === peg$FAILED) {\n        s5 = null;\n      }\n      s6 = [];\n      s7 = peg$parsenag();\n      while (s7 !== peg$FAILED) {\n        s6.push(s7);\n        s7 = peg$parsenag();\n      }\n      s7 = peg$parse_();\n      s8 = peg$parsecomment();\n      if (s8 === peg$FAILED) {\n        s8 = null;\n      }\n      s9 = [];\n      s10 = peg$parsevariation();\n      while (s10 !== peg$FAILED) {\n        s9.push(s10);\n        s10 = peg$parsevariation();\n      }\n      s0 = peg$f5(s4, s5, s6, s8, s9);\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    return s0;\n  }\n  function peg$parsemoveNumber() {\n    var s0, s1, s2, s3, s4, s5;\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = input.charAt(peg$currPos);\n    if (peg$r2.test(s2)) {\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) {\n        peg$fail(peg$e9);\n      }\n    }\n    while (s2 !== peg$FAILED) {\n      s1.push(s2);\n      s2 = input.charAt(peg$currPos);\n      if (peg$r2.test(s2)) {\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) {\n          peg$fail(peg$e9);\n        }\n      }\n    }\n    if (input.charCodeAt(peg$currPos) === 46) {\n      s2 = peg$c3;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) {\n        peg$fail(peg$e10);\n      }\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse_();\n      s4 = [];\n      s5 = input.charAt(peg$currPos);\n      if (peg$r3.test(s5)) {\n        peg$currPos++;\n      } else {\n        s5 = peg$FAILED;\n        if (peg$silentFails === 0) {\n          peg$fail(peg$e11);\n        }\n      }\n      while (s5 !== peg$FAILED) {\n        s4.push(s5);\n        s5 = input.charAt(peg$currPos);\n        if (peg$r3.test(s5)) {\n          peg$currPos++;\n        } else {\n          s5 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e11);\n          }\n        }\n      }\n      s1 = [s1, s2, s3, s4];\n      s0 = s1;\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) {\n        peg$fail(peg$e8);\n      }\n    }\n    return s0;\n  }\n  function peg$parsesan() {\n    var s0, s1, s2, s3, s4, s5;\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    if (input.substr(peg$currPos, 5) === peg$c4) {\n      s2 = peg$c4;\n      peg$currPos += 5;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) {\n        peg$fail(peg$e13);\n      }\n    }\n    if (s2 === peg$FAILED) {\n      if (input.substr(peg$currPos, 3) === peg$c5) {\n        s2 = peg$c5;\n        peg$currPos += 3;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) {\n          peg$fail(peg$e14);\n        }\n      }\n      if (s2 === peg$FAILED) {\n        if (input.substr(peg$currPos, 5) === peg$c6) {\n          s2 = peg$c6;\n          peg$currPos += 5;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e15);\n          }\n        }\n        if (s2 === peg$FAILED) {\n          if (input.substr(peg$currPos, 3) === peg$c7) {\n            s2 = peg$c7;\n            peg$currPos += 3;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$e16);\n            }\n          }\n          if (s2 === peg$FAILED) {\n            s2 = peg$currPos;\n            s3 = input.charAt(peg$currPos);\n            if (peg$r0.test(s3)) {\n              peg$currPos++;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) {\n                peg$fail(peg$e5);\n              }\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = [];\n              s5 = input.charAt(peg$currPos);\n              if (peg$r4.test(s5)) {\n                peg$currPos++;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$e17);\n                }\n              }\n              if (s5 !== peg$FAILED) {\n                while (s5 !== peg$FAILED) {\n                  s4.push(s5);\n                  s5 = input.charAt(peg$currPos);\n                  if (peg$r4.test(s5)) {\n                    peg$currPos++;\n                  } else {\n                    s5 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                      peg$fail(peg$e17);\n                    }\n                  }\n                }\n              } else {\n                s4 = peg$FAILED;\n              }\n              if (s4 !== peg$FAILED) {\n                s3 = [s3, s4];\n                s2 = s3;\n              } else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          }\n        }\n      }\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = input.charAt(peg$currPos);\n      if (peg$r5.test(s3)) {\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) {\n          peg$fail(peg$e18);\n        }\n      }\n      if (s3 === peg$FAILED) {\n        s3 = null;\n      }\n      s2 = [s2, s3];\n      s1 = s2;\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      s0 = input.substring(s0, peg$currPos);\n    } else {\n      s0 = s1;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) {\n        peg$fail(peg$e12);\n      }\n    }\n    return s0;\n  }\n  function peg$parsesuffixAnnotation() {\n    var s0, s1, s2;\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = input.charAt(peg$currPos);\n    if (peg$r6.test(s2)) {\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) {\n        peg$fail(peg$e20);\n      }\n    }\n    while (s2 !== peg$FAILED) {\n      s1.push(s2);\n      if (s1.length >= 2) {\n        s2 = peg$FAILED;\n      } else {\n        s2 = input.charAt(peg$currPos);\n        if (peg$r6.test(s2)) {\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e20);\n          }\n        }\n      }\n    }\n    if (s1.length < 1) {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    } else {\n      s0 = s1;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) {\n        peg$fail(peg$e19);\n      }\n    }\n    return s0;\n  }\n  function peg$parsenag() {\n    var s0, s2, s3, s4, s5;\n    peg$silentFails++;\n    s0 = peg$currPos;\n    peg$parse_();\n    if (input.charCodeAt(peg$currPos) === 36) {\n      s2 = peg$c8;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) {\n        peg$fail(peg$e22);\n      }\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = peg$currPos;\n      s4 = [];\n      s5 = input.charAt(peg$currPos);\n      if (peg$r2.test(s5)) {\n        peg$currPos++;\n      } else {\n        s5 = peg$FAILED;\n        if (peg$silentFails === 0) {\n          peg$fail(peg$e9);\n        }\n      }\n      if (s5 !== peg$FAILED) {\n        while (s5 !== peg$FAILED) {\n          s4.push(s5);\n          s5 = input.charAt(peg$currPos);\n          if (peg$r2.test(s5)) {\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$e9);\n            }\n          }\n        }\n      } else {\n        s4 = peg$FAILED;\n      }\n      if (s4 !== peg$FAILED) {\n        s3 = input.substring(s3, peg$currPos);\n      } else {\n        s3 = s4;\n      }\n      if (s3 !== peg$FAILED) {\n        s0 = peg$f6(s3);\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      if (peg$silentFails === 0) {\n        peg$fail(peg$e21);\n      }\n    }\n    return s0;\n  }\n  function peg$parsecomment() {\n    var s0;\n    s0 = peg$parsebraceComment();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parserestOfLineComment();\n    }\n    return s0;\n  }\n  function peg$parsebraceComment() {\n    var s0, s1, s2, s3, s4;\n    peg$silentFails++;\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 123) {\n      s1 = peg$c9;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) {\n        peg$fail(peg$e24);\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      s3 = [];\n      s4 = input.charAt(peg$currPos);\n      if (peg$r7.test(s4)) {\n        peg$currPos++;\n      } else {\n        s4 = peg$FAILED;\n        if (peg$silentFails === 0) {\n          peg$fail(peg$e25);\n        }\n      }\n      while (s4 !== peg$FAILED) {\n        s3.push(s4);\n        s4 = input.charAt(peg$currPos);\n        if (peg$r7.test(s4)) {\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e25);\n          }\n        }\n      }\n      s2 = input.substring(s2, peg$currPos);\n      if (input.charCodeAt(peg$currPos) === 125) {\n        s3 = peg$c10;\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) {\n          peg$fail(peg$e26);\n        }\n      }\n      if (s3 !== peg$FAILED) {\n        s0 = peg$f7(s2);\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) {\n        peg$fail(peg$e23);\n      }\n    }\n    return s0;\n  }\n  function peg$parserestOfLineComment() {\n    var s0, s1, s2, s3, s4;\n    peg$silentFails++;\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 59) {\n      s1 = peg$c11;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) {\n        peg$fail(peg$e28);\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      s3 = [];\n      s4 = input.charAt(peg$currPos);\n      if (peg$r8.test(s4)) {\n        peg$currPos++;\n      } else {\n        s4 = peg$FAILED;\n        if (peg$silentFails === 0) {\n          peg$fail(peg$e29);\n        }\n      }\n      while (s4 !== peg$FAILED) {\n        s3.push(s4);\n        s4 = input.charAt(peg$currPos);\n        if (peg$r8.test(s4)) {\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e29);\n          }\n        }\n      }\n      s2 = input.substring(s2, peg$currPos);\n      s0 = peg$f8(s2);\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) {\n        peg$fail(peg$e27);\n      }\n    }\n    return s0;\n  }\n  function peg$parsevariation() {\n    var s0, s2, s3, s5;\n    peg$silentFails++;\n    s0 = peg$currPos;\n    peg$parse_();\n    if (input.charCodeAt(peg$currPos) === 40) {\n      s2 = peg$c12;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) {\n        peg$fail(peg$e31);\n      }\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parseline();\n      if (s3 !== peg$FAILED) {\n        peg$parse_();\n        if (input.charCodeAt(peg$currPos) === 41) {\n          s5 = peg$c13;\n          peg$currPos++;\n        } else {\n          s5 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e32);\n          }\n        }\n        if (s5 !== peg$FAILED) {\n          s0 = peg$f9(s3);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      if (peg$silentFails === 0) {\n        peg$fail(peg$e30);\n      }\n    }\n    return s0;\n  }\n  function peg$parsegameTerminationMarker() {\n    var s0, s1, s3;\n    peg$silentFails++;\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3) === peg$c14) {\n      s1 = peg$c14;\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) {\n        peg$fail(peg$e34);\n      }\n    }\n    if (s1 === peg$FAILED) {\n      if (input.substr(peg$currPos, 3) === peg$c15) {\n        s1 = peg$c15;\n        peg$currPos += 3;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) {\n          peg$fail(peg$e35);\n        }\n      }\n      if (s1 === peg$FAILED) {\n        if (input.substr(peg$currPos, 7) === peg$c16) {\n          s1 = peg$c16;\n          peg$currPos += 7;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e36);\n          }\n        }\n        if (s1 === peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 42) {\n            s1 = peg$c17;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$e37);\n            }\n          }\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$parse_();\n      s3 = peg$parsecomment();\n      if (s3 === peg$FAILED) {\n        s3 = null;\n      }\n      s0 = peg$f10(s1, s3);\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) {\n        peg$fail(peg$e33);\n      }\n    }\n    return s0;\n  }\n  function peg$parse_() {\n    var s0, s1;\n    peg$silentFails++;\n    s0 = [];\n    s1 = input.charAt(peg$currPos);\n    if (peg$r9.test(s1)) {\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) {\n        peg$fail(peg$e39);\n      }\n    }\n    while (s1 !== peg$FAILED) {\n      s0.push(s1);\n      s1 = input.charAt(peg$currPos);\n      if (peg$r9.test(s1)) {\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) {\n          peg$fail(peg$e39);\n        }\n      }\n    }\n    peg$silentFails--;\n    s1 = peg$FAILED;\n    if (peg$silentFails === 0) {\n      peg$fail(peg$e38);\n    }\n    return s0;\n  }\n  peg$result = peg$startRuleFunction();\n  if (options.peg$library) {\n    return /** @type {any} */{\n      peg$result,\n      peg$currPos,\n      peg$FAILED,\n      peg$maxFailExpected,\n      peg$maxFailPos\n    };\n  }\n  if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n    return peg$result;\n  } else {\n    if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n      peg$fail(peg$endExpectation());\n    }\n    throw peg$buildStructuredError(peg$maxFailExpected, peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null, peg$maxFailPos < input.length ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) : peg$computeLocation(peg$maxFailPos, peg$maxFailPos));\n  }\n}\n\n/**\n * @license\n * Copyright (c) 2025, Jeff Hlywa (jhlywa@gmail.com)\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice,\n *    this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n *    this list of conditions and the following disclaimer in the documentation\n *    and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\nconst MASK64 = 0xffffffffffffffffn;\nfunction rotl(x, k) {\n  return (x << k | x >> 64n - k) & 0xffffffffffffffffn;\n}\nfunction wrappingMul(x, y) {\n  return x * y & MASK64;\n}\n// xoroshiro128**\nfunction xoroshiro128(state) {\n  return function () {\n    let s0 = BigInt(state & MASK64);\n    let s1 = BigInt(state >> 64n & MASK64);\n    const result = wrappingMul(rotl(wrappingMul(s0, 5n), 7n), 9n);\n    s1 ^= s0;\n    s0 = (rotl(s0, 24n) ^ s1 ^ s1 << 16n) & MASK64;\n    s1 = rotl(s1, 37n);\n    state = s1 << 64n | s0;\n    return result;\n  };\n}\nconst rand = xoroshiro128(0xa187eb39cdcaed8f31c4b365b102e01en);\nconst PIECE_KEYS = Array.from({\n  length: 2\n}, () => Array.from({\n  length: 6\n}, () => Array.from({\n  length: 128\n}, () => rand())));\nconst EP_KEYS = Array.from({\n  length: 8\n}, () => rand());\nconst CASTLING_KEYS = Array.from({\n  length: 16\n}, () => rand());\nconst SIDE_KEY = rand();\nconst WHITE = 'w';\nconst BLACK = 'b';\nconst PAWN = 'p';\nconst KNIGHT = 'n';\nconst BISHOP = 'b';\nconst ROOK = 'r';\nconst QUEEN = 'q';\nconst KING = 'k';\nconst DEFAULT_POSITION = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1';\nclass Move {\n  color;\n  from;\n  to;\n  piece;\n  captured;\n  promotion;\n  /**\n   * @deprecated This field is deprecated and will be removed in version 2.0.0.\n   * Please use move descriptor functions instead: `isCapture`, `isPromotion`,\n   * `isEnPassant`, `isKingsideCastle`, `isQueensideCastle`, `isCastle`, and\n   * `isBigPawn`\n   */\n  flags;\n  san;\n  lan;\n  before;\n  after;\n  constructor(chess, internal) {\n    const {\n      color,\n      piece,\n      from,\n      to,\n      flags,\n      captured,\n      promotion\n    } = internal;\n    const fromAlgebraic = algebraic(from);\n    const toAlgebraic = algebraic(to);\n    this.color = color;\n    this.piece = piece;\n    this.from = fromAlgebraic;\n    this.to = toAlgebraic;\n    /*\n     * HACK: The chess['_method']() calls below invoke private methods in the\n     * Chess class to generate SAN and FEN. It's a bit of a hack, but makes the\n     * code cleaner elsewhere.\n     */\n    this.san = chess['_moveToSan'](internal, chess['_moves']({\n      legal: true\n    }));\n    this.lan = fromAlgebraic + toAlgebraic;\n    this.before = chess.fen();\n    // Generate the FEN for the 'after' key\n    chess['_makeMove'](internal);\n    this.after = chess.fen();\n    chess['_undoMove']();\n    // Build the text representation of the move flags\n    this.flags = '';\n    for (const flag in BITS) {\n      if (BITS[flag] & flags) {\n        this.flags += FLAGS[flag];\n      }\n    }\n    if (captured) {\n      this.captured = captured;\n    }\n    if (promotion) {\n      this.promotion = promotion;\n      this.lan += promotion;\n    }\n  }\n  isCapture() {\n    return this.flags.indexOf(FLAGS['CAPTURE']) > -1;\n  }\n  isPromotion() {\n    return this.flags.indexOf(FLAGS['PROMOTION']) > -1;\n  }\n  isEnPassant() {\n    return this.flags.indexOf(FLAGS['EP_CAPTURE']) > -1;\n  }\n  isKingsideCastle() {\n    return this.flags.indexOf(FLAGS['KSIDE_CASTLE']) > -1;\n  }\n  isQueensideCastle() {\n    return this.flags.indexOf(FLAGS['QSIDE_CASTLE']) > -1;\n  }\n  isBigPawn() {\n    return this.flags.indexOf(FLAGS['BIG_PAWN']) > -1;\n  }\n}\nconst EMPTY = -1;\nconst FLAGS = {\n  NORMAL: 'n',\n  CAPTURE: 'c',\n  BIG_PAWN: 'b',\n  EP_CAPTURE: 'e',\n  PROMOTION: 'p',\n  KSIDE_CASTLE: 'k',\n  QSIDE_CASTLE: 'q',\n  NULL_MOVE: '-'\n};\n// prettier-ignore\nconst SQUARES = ['a8', 'b8', 'c8', 'd8', 'e8', 'f8', 'g8', 'h8', 'a7', 'b7', 'c7', 'd7', 'e7', 'f7', 'g7', 'h7', 'a6', 'b6', 'c6', 'd6', 'e6', 'f6', 'g6', 'h6', 'a5', 'b5', 'c5', 'd5', 'e5', 'f5', 'g5', 'h5', 'a4', 'b4', 'c4', 'd4', 'e4', 'f4', 'g4', 'h4', 'a3', 'b3', 'c3', 'd3', 'e3', 'f3', 'g3', 'h3', 'a2', 'b2', 'c2', 'd2', 'e2', 'f2', 'g2', 'h2', 'a1', 'b1', 'c1', 'd1', 'e1', 'f1', 'g1', 'h1'];\nconst BITS = {\n  NORMAL: 1,\n  CAPTURE: 2,\n  BIG_PAWN: 4,\n  EP_CAPTURE: 8,\n  PROMOTION: 16,\n  KSIDE_CASTLE: 32,\n  QSIDE_CASTLE: 64,\n  NULL_MOVE: 128\n};\n/* eslint-disable @typescript-eslint/naming-convention */\n// these are required, according to spec\nconst SEVEN_TAG_ROSTER = {\n  Event: '?',\n  Site: '?',\n  Date: '????.??.??',\n  Round: '?',\n  White: '?',\n  Black: '?',\n  Result: '*'\n};\n/**\n * These nulls are placeholders to fix the order of tags (as they appear in PGN spec); null values will be\n * eliminated in getHeaders()\n */\nconst SUPLEMENTAL_TAGS = {\n  WhiteTitle: null,\n  BlackTitle: null,\n  WhiteElo: null,\n  BlackElo: null,\n  WhiteUSCF: null,\n  BlackUSCF: null,\n  WhiteNA: null,\n  BlackNA: null,\n  WhiteType: null,\n  BlackType: null,\n  EventDate: null,\n  EventSponsor: null,\n  Section: null,\n  Stage: null,\n  Board: null,\n  Opening: null,\n  Variation: null,\n  SubVariation: null,\n  ECO: null,\n  NIC: null,\n  Time: null,\n  UTCTime: null,\n  UTCDate: null,\n  TimeControl: null,\n  SetUp: null,\n  FEN: null,\n  Termination: null,\n  Annotator: null,\n  Mode: null,\n  PlyCount: null\n};\nconst HEADER_TEMPLATE = {\n  ...SEVEN_TAG_ROSTER,\n  ...SUPLEMENTAL_TAGS\n};\n/* eslint-enable @typescript-eslint/naming-convention */\n/*\n * NOTES ABOUT 0x88 MOVE GENERATION ALGORITHM\n * ----------------------------------------------------------------------------\n * From https://github.com/jhlywa/chess.js/issues/230\n *\n * A lot of people are confused when they first see the internal representation\n * of chess.js. It uses the 0x88 Move Generation Algorithm which internally\n * stores the board as an 8x16 array. This is purely for efficiency but has a\n * couple of interesting benefits:\n *\n * 1. 0x88 offers a very inexpensive \"off the board\" check. Bitwise AND (&) any\n *    square with 0x88, if the result is non-zero then the square is off the\n *    board. For example, assuming a knight square A8 (0 in 0x88 notation),\n *    there are 8 possible directions in which the knight can move. These\n *    directions are relative to the 8x16 board and are stored in the\n *    PIECE_OFFSETS map. One possible move is A8 - 18 (up one square, and two\n *    squares to the left - which is off the board). 0 - 18 = -18 & 0x88 = 0x88\n *    (because of two-complement representation of -18). The non-zero result\n *    means the square is off the board and the move is illegal. Take the\n *    opposite move (from A8 to C7), 0 + 18 = 18 & 0x88 = 0. A result of zero\n *    means the square is on the board.\n *\n * 2. The relative distance (or difference) between two squares on a 8x16 board\n *    is unique and can be used to inexpensively determine if a piece on a\n *    square can attack any other arbitrary square. For example, let's see if a\n *    pawn on E7 can attack E2. The difference between E7 (20) - E2 (100) is\n *    -80. We add 119 to make the ATTACKS array index non-negative (because the\n *    worst case difference is A8 - H1 = -119). The ATTACKS array contains a\n *    bitmask of pieces that can attack from that distance and direction.\n *    ATTACKS[-80 + 119=39] gives us 24 or 0b11000 in binary. Look at the\n *    PIECE_MASKS map to determine the mask for a given piece type. In our pawn\n *    example, we would check to see if 24 & 0x1 is non-zero, which it is\n *    not. So, naturally, a pawn on E7 can't attack a piece on E2. However, a\n *    rook can since 24 & 0x8 is non-zero. The only thing left to check is that\n *    there are no blocking pieces between E7 and E2. That's where the RAYS\n *    array comes in. It provides an offset (in this case 16) to add to E7 (20)\n *    to check for blocking pieces. E7 (20) + 16 = E6 (36) + 16 = E5 (52) etc.\n */\n// prettier-ignore\n// eslint-disable-next-line\nconst Ox88 = {\n  a8: 0,\n  b8: 1,\n  c8: 2,\n  d8: 3,\n  e8: 4,\n  f8: 5,\n  g8: 6,\n  h8: 7,\n  a7: 16,\n  b7: 17,\n  c7: 18,\n  d7: 19,\n  e7: 20,\n  f7: 21,\n  g7: 22,\n  h7: 23,\n  a6: 32,\n  b6: 33,\n  c6: 34,\n  d6: 35,\n  e6: 36,\n  f6: 37,\n  g6: 38,\n  h6: 39,\n  a5: 48,\n  b5: 49,\n  c5: 50,\n  d5: 51,\n  e5: 52,\n  f5: 53,\n  g5: 54,\n  h5: 55,\n  a4: 64,\n  b4: 65,\n  c4: 66,\n  d4: 67,\n  e4: 68,\n  f4: 69,\n  g4: 70,\n  h4: 71,\n  a3: 80,\n  b3: 81,\n  c3: 82,\n  d3: 83,\n  e3: 84,\n  f3: 85,\n  g3: 86,\n  h3: 87,\n  a2: 96,\n  b2: 97,\n  c2: 98,\n  d2: 99,\n  e2: 100,\n  f2: 101,\n  g2: 102,\n  h2: 103,\n  a1: 112,\n  b1: 113,\n  c1: 114,\n  d1: 115,\n  e1: 116,\n  f1: 117,\n  g1: 118,\n  h1: 119\n};\nconst PAWN_OFFSETS = {\n  b: [16, 32, 17, 15],\n  w: [-16, -32, -17, -15]\n};\nconst PIECE_OFFSETS = {\n  n: [-18, -33, -31, -14, 18, 33, 31, 14],\n  b: [-17, -15, 17, 15],\n  r: [-16, 1, 16, -1],\n  q: [-17, -16, -15, 1, 17, 16, 15, -1],\n  k: [-17, -16, -15, 1, 17, 16, 15, -1]\n};\n// prettier-ignore\nconst ATTACKS = [20, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 20, 0, 0, 20, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 20, 0, 0, 0, 0, 24, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 24, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 24, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 2, 24, 2, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 53, 56, 53, 2, 0, 0, 0, 0, 0, 0, 24, 24, 24, 24, 24, 24, 56, 0, 56, 24, 24, 24, 24, 24, 24, 0, 0, 0, 0, 0, 0, 2, 53, 56, 53, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 2, 24, 2, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 24, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 24, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 24, 0, 0, 0, 0, 20, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 20, 0, 0, 20, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 20];\n// prettier-ignore\nconst RAYS = [17, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 15, 0, 0, 17, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 17, 0, 0, 0, 0, 16, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 16, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 16, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 16, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 16, 15, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, -15, -16, -17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -15, 0, -16, 0, -17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -15, 0, 0, -16, 0, 0, -17, 0, 0, 0, 0, 0, 0, 0, 0, -15, 0, 0, 0, -16, 0, 0, 0, -17, 0, 0, 0, 0, 0, 0, -15, 0, 0, 0, 0, -16, 0, 0, 0, 0, -17, 0, 0, 0, 0, -15, 0, 0, 0, 0, 0, -16, 0, 0, 0, 0, 0, -17, 0, 0, -15, 0, 0, 0, 0, 0, 0, -16, 0, 0, 0, 0, 0, 0, -17];\nconst PIECE_MASKS = {\n  p: 0x1,\n  n: 0x2,\n  b: 0x4,\n  r: 0x8,\n  q: 0x10,\n  k: 0x20\n};\nconst SYMBOLS = 'pnbrqkPNBRQK';\nconst PROMOTIONS = [KNIGHT, BISHOP, ROOK, QUEEN];\nconst RANK_1 = 7;\nconst RANK_2 = 6;\n/*\n * const RANK_3 = 5\n * const RANK_4 = 4\n * const RANK_5 = 3\n * const RANK_6 = 2\n */\nconst RANK_7 = 1;\nconst RANK_8 = 0;\nconst SIDES = {\n  [KING]: BITS.KSIDE_CASTLE,\n  [QUEEN]: BITS.QSIDE_CASTLE\n};\nconst ROOKS = {\n  w: [{\n    square: Ox88.a1,\n    flag: BITS.QSIDE_CASTLE\n  }, {\n    square: Ox88.h1,\n    flag: BITS.KSIDE_CASTLE\n  }],\n  b: [{\n    square: Ox88.a8,\n    flag: BITS.QSIDE_CASTLE\n  }, {\n    square: Ox88.h8,\n    flag: BITS.KSIDE_CASTLE\n  }]\n};\nconst SECOND_RANK = {\n  b: RANK_7,\n  w: RANK_2\n};\nconst SAN_NULLMOVE = '--';\n// Extracts the zero-based rank of an 0x88 square.\nfunction rank(square) {\n  return square >> 4;\n}\n// Extracts the zero-based file of an 0x88 square.\nfunction file(square) {\n  return square & 0xf;\n}\nfunction isDigit(c) {\n  return '0123456789'.indexOf(c) !== -1;\n}\n// Converts a 0x88 square to algebraic notation.\nfunction algebraic(square) {\n  const f = file(square);\n  const r = rank(square);\n  return 'abcdefgh'.substring(f, f + 1) + '87654321'.substring(r, r + 1);\n}\nfunction swapColor(color) {\n  return color === WHITE ? BLACK : WHITE;\n}\nfunction validateFen(fen) {\n  // 1st criterion: 6 space-seperated fields?\n  const tokens = fen.split(/\\s+/);\n  if (tokens.length !== 6) {\n    return {\n      ok: false,\n      error: 'Invalid FEN: must contain six space-delimited fields'\n    };\n  }\n  // 2nd criterion: move number field is a integer value > 0?\n  const moveNumber = parseInt(tokens[5], 10);\n  if (isNaN(moveNumber) || moveNumber <= 0) {\n    return {\n      ok: false,\n      error: 'Invalid FEN: move number must be a positive integer'\n    };\n  }\n  // 3rd criterion: half move counter is an integer >= 0?\n  const halfMoves = parseInt(tokens[4], 10);\n  if (isNaN(halfMoves) || halfMoves < 0) {\n    return {\n      ok: false,\n      error: 'Invalid FEN: half move counter number must be a non-negative integer'\n    };\n  }\n  // 4th criterion: 4th field is a valid e.p.-string?\n  if (!/^(-|[abcdefgh][36])$/.test(tokens[3])) {\n    return {\n      ok: false,\n      error: 'Invalid FEN: en-passant square is invalid'\n    };\n  }\n  // 5th criterion: 3th field is a valid castle-string?\n  if (/[^kKqQ-]/.test(tokens[2])) {\n    return {\n      ok: false,\n      error: 'Invalid FEN: castling availability is invalid'\n    };\n  }\n  // 6th criterion: 2nd field is \"w\" (white) or \"b\" (black)?\n  if (!/^(w|b)$/.test(tokens[1])) {\n    return {\n      ok: false,\n      error: 'Invalid FEN: side-to-move is invalid'\n    };\n  }\n  // 7th criterion: 1st field contains 8 rows?\n  const rows = tokens[0].split('/');\n  if (rows.length !== 8) {\n    return {\n      ok: false,\n      error: \"Invalid FEN: piece data does not contain 8 '/'-delimited rows\"\n    };\n  }\n  // 8th criterion: every row is valid?\n  for (let i = 0; i < rows.length; i++) {\n    // check for right sum of fields AND not two numbers in succession\n    let sumFields = 0;\n    let previousWasNumber = false;\n    for (let k = 0; k < rows[i].length; k++) {\n      if (isDigit(rows[i][k])) {\n        if (previousWasNumber) {\n          return {\n            ok: false,\n            error: 'Invalid FEN: piece data is invalid (consecutive number)'\n          };\n        }\n        sumFields += parseInt(rows[i][k], 10);\n        previousWasNumber = true;\n      } else {\n        if (!/^[prnbqkPRNBQK]$/.test(rows[i][k])) {\n          return {\n            ok: false,\n            error: 'Invalid FEN: piece data is invalid (invalid piece)'\n          };\n        }\n        sumFields += 1;\n        previousWasNumber = false;\n      }\n    }\n    if (sumFields !== 8) {\n      return {\n        ok: false,\n        error: 'Invalid FEN: piece data is invalid (too many squares in rank)'\n      };\n    }\n  }\n  // 9th criterion: is en-passant square legal?\n  if (tokens[3][1] == '3' && tokens[1] == 'w' || tokens[3][1] == '6' && tokens[1] == 'b') {\n    return {\n      ok: false,\n      error: 'Invalid FEN: illegal en-passant square'\n    };\n  }\n  // 10th criterion: does chess position contain exact two kings?\n  const kings = [{\n    color: 'white',\n    regex: /K/g\n  }, {\n    color: 'black',\n    regex: /k/g\n  }];\n  for (const {\n    color,\n    regex\n  } of kings) {\n    if (!regex.test(tokens[0])) {\n      return {\n        ok: false,\n        error: `Invalid FEN: missing ${color} king`\n      };\n    }\n    if ((tokens[0].match(regex) || []).length > 1) {\n      return {\n        ok: false,\n        error: `Invalid FEN: too many ${color} kings`\n      };\n    }\n  }\n  // 11th criterion: are any pawns on the first or eighth rows?\n  if (Array.from(rows[0] + rows[7]).some(char => char.toUpperCase() === 'P')) {\n    return {\n      ok: false,\n      error: 'Invalid FEN: some pawns are on the edge rows'\n    };\n  }\n  return {\n    ok: true\n  };\n}\n// this function is used to uniquely identify ambiguous moves\nfunction getDisambiguator(move, moves) {\n  const from = move.from;\n  const to = move.to;\n  const piece = move.piece;\n  let ambiguities = 0;\n  let sameRank = 0;\n  let sameFile = 0;\n  for (let i = 0, len = moves.length; i < len; i++) {\n    const ambigFrom = moves[i].from;\n    const ambigTo = moves[i].to;\n    const ambigPiece = moves[i].piece;\n    /*\n     * if a move of the same piece type ends on the same to square, we'll need\n     * to add a disambiguator to the algebraic notation\n     */\n    if (piece === ambigPiece && from !== ambigFrom && to === ambigTo) {\n      ambiguities++;\n      if (rank(from) === rank(ambigFrom)) {\n        sameRank++;\n      }\n      if (file(from) === file(ambigFrom)) {\n        sameFile++;\n      }\n    }\n  }\n  if (ambiguities > 0) {\n    if (sameRank > 0 && sameFile > 0) {\n      /*\n       * if there exists a similar moving piece on the same rank and file as\n       * the move in question, use the square as the disambiguator\n       */\n      return algebraic(from);\n    } else if (sameFile > 0) {\n      /*\n       * if the moving piece rests on the same file, use the rank symbol as the\n       * disambiguator\n       */\n      return algebraic(from).charAt(1);\n    } else {\n      // else use the file symbol\n      return algebraic(from).charAt(0);\n    }\n  }\n  return '';\n}\nfunction addMove(moves, color, from, to, piece, captured = undefined, flags = BITS.NORMAL) {\n  const r = rank(to);\n  if (piece === PAWN && (r === RANK_1 || r === RANK_8)) {\n    for (let i = 0; i < PROMOTIONS.length; i++) {\n      const promotion = PROMOTIONS[i];\n      moves.push({\n        color,\n        from,\n        to,\n        piece,\n        captured,\n        promotion,\n        flags: flags | BITS.PROMOTION\n      });\n    }\n  } else {\n    moves.push({\n      color,\n      from,\n      to,\n      piece,\n      captured,\n      flags\n    });\n  }\n}\nfunction inferPieceType(san) {\n  let pieceType = san.charAt(0);\n  if (pieceType >= 'a' && pieceType <= 'h') {\n    const matches = san.match(/[a-h]\\d.*[a-h]\\d/);\n    if (matches) {\n      return undefined;\n    }\n    return PAWN;\n  }\n  pieceType = pieceType.toLowerCase();\n  if (pieceType === 'o') {\n    return KING;\n  }\n  return pieceType;\n}\n// parses all of the decorators out of a SAN string\nfunction strippedSan(move) {\n  return move.replace(/=/, '').replace(/[+#]?[?!]*$/, '');\n}\nclass Chess {\n  _board = new Array(128);\n  _turn = WHITE;\n  _header = {};\n  _kings = {\n    w: EMPTY,\n    b: EMPTY\n  };\n  _epSquare = -1;\n  _halfMoves = 0;\n  _moveNumber = 0;\n  _history = [];\n  _comments = {};\n  _castling = {\n    w: 0,\n    b: 0\n  };\n  _hash = 0n;\n  // tracks number of times a position has been seen for repetition checking\n  _positionCount = new Map();\n  constructor(fen = DEFAULT_POSITION, {\n    skipValidation = false\n  } = {}) {\n    this.load(fen, {\n      skipValidation\n    });\n  }\n  clear({\n    preserveHeaders = false\n  } = {}) {\n    this._board = new Array(128);\n    this._kings = {\n      w: EMPTY,\n      b: EMPTY\n    };\n    this._turn = WHITE;\n    this._castling = {\n      w: 0,\n      b: 0\n    };\n    this._epSquare = EMPTY;\n    this._halfMoves = 0;\n    this._moveNumber = 1;\n    this._history = [];\n    this._comments = {};\n    this._header = preserveHeaders ? this._header : {\n      ...HEADER_TEMPLATE\n    };\n    this._hash = this._computeHash();\n    this._positionCount = new Map();\n    /*\n     * Delete the SetUp and FEN headers (if preserved), the board is empty and\n     * these headers don't make sense in this state. They'll get added later\n     * via .load() or .put()\n     */\n    this._header['SetUp'] = null;\n    this._header['FEN'] = null;\n  }\n  load(fen, {\n    skipValidation = false,\n    preserveHeaders = false\n  } = {}) {\n    let tokens = fen.split(/\\s+/);\n    // append commonly omitted fen tokens\n    if (tokens.length >= 2 && tokens.length < 6) {\n      const adjustments = ['-', '-', '0', '1'];\n      fen = tokens.concat(adjustments.slice(-(6 - tokens.length))).join(' ');\n    }\n    tokens = fen.split(/\\s+/);\n    if (!skipValidation) {\n      const {\n        ok,\n        error\n      } = validateFen(fen);\n      if (!ok) {\n        throw new Error(error);\n      }\n    }\n    const position = tokens[0];\n    let square = 0;\n    this.clear({\n      preserveHeaders\n    });\n    for (let i = 0; i < position.length; i++) {\n      const piece = position.charAt(i);\n      if (piece === '/') {\n        square += 8;\n      } else if (isDigit(piece)) {\n        square += parseInt(piece, 10);\n      } else {\n        const color = piece < 'a' ? WHITE : BLACK;\n        this._put({\n          type: piece.toLowerCase(),\n          color\n        }, algebraic(square));\n        square++;\n      }\n    }\n    this._turn = tokens[1];\n    if (tokens[2].indexOf('K') > -1) {\n      this._castling.w |= BITS.KSIDE_CASTLE;\n    }\n    if (tokens[2].indexOf('Q') > -1) {\n      this._castling.w |= BITS.QSIDE_CASTLE;\n    }\n    if (tokens[2].indexOf('k') > -1) {\n      this._castling.b |= BITS.KSIDE_CASTLE;\n    }\n    if (tokens[2].indexOf('q') > -1) {\n      this._castling.b |= BITS.QSIDE_CASTLE;\n    }\n    this._epSquare = tokens[3] === '-' ? EMPTY : Ox88[tokens[3]];\n    this._halfMoves = parseInt(tokens[4], 10);\n    this._moveNumber = parseInt(tokens[5], 10);\n    this._hash = this._computeHash();\n    this._updateSetup(fen);\n    this._incPositionCount();\n  }\n  fen({\n    forceEnpassantSquare = false\n  } = {}) {\n    let empty = 0;\n    let fen = '';\n    for (let i = Ox88.a8; i <= Ox88.h1; i++) {\n      if (this._board[i]) {\n        if (empty > 0) {\n          fen += empty;\n          empty = 0;\n        }\n        const {\n          color,\n          type: piece\n        } = this._board[i];\n        fen += color === WHITE ? piece.toUpperCase() : piece.toLowerCase();\n      } else {\n        empty++;\n      }\n      if (i + 1 & 0x88) {\n        if (empty > 0) {\n          fen += empty;\n        }\n        if (i !== Ox88.h1) {\n          fen += '/';\n        }\n        empty = 0;\n        i += 8;\n      }\n    }\n    let castling = '';\n    if (this._castling[WHITE] & BITS.KSIDE_CASTLE) {\n      castling += 'K';\n    }\n    if (this._castling[WHITE] & BITS.QSIDE_CASTLE) {\n      castling += 'Q';\n    }\n    if (this._castling[BLACK] & BITS.KSIDE_CASTLE) {\n      castling += 'k';\n    }\n    if (this._castling[BLACK] & BITS.QSIDE_CASTLE) {\n      castling += 'q';\n    }\n    // do we have an empty castling flag?\n    castling = castling || '-';\n    let epSquare = '-';\n    /*\n     * only print the ep square if en passant is a valid move (pawn is present\n     * and ep capture is not pinned)\n     */\n    if (this._epSquare !== EMPTY) {\n      if (forceEnpassantSquare) {\n        epSquare = algebraic(this._epSquare);\n      } else {\n        const bigPawnSquare = this._epSquare + (this._turn === WHITE ? 16 : -16);\n        const squares = [bigPawnSquare + 1, bigPawnSquare - 1];\n        for (const square of squares) {\n          // is the square off the board?\n          if (square & 0x88) {\n            continue;\n          }\n          const color = this._turn;\n          // is there a pawn that can capture the epSquare?\n          if (this._board[square]?.color === color && this._board[square]?.type === PAWN) {\n            // if the pawn makes an ep capture, does it leave its king in check?\n            this._makeMove({\n              color,\n              from: square,\n              to: this._epSquare,\n              piece: PAWN,\n              captured: PAWN,\n              flags: BITS.EP_CAPTURE\n            });\n            const isLegal = !this._isKingAttacked(color);\n            this._undoMove();\n            // if ep is legal, break and set the ep square in the FEN output\n            if (isLegal) {\n              epSquare = algebraic(this._epSquare);\n              break;\n            }\n          }\n        }\n      }\n    }\n    return [fen, this._turn, castling, epSquare, this._halfMoves, this._moveNumber].join(' ');\n  }\n  _pieceKey(i) {\n    if (!this._board[i]) {\n      return 0n;\n    }\n    const {\n      color,\n      type\n    } = this._board[i];\n    const colorIndex = {\n      w: 0,\n      b: 1\n    }[color];\n    const typeIndex = {\n      p: 0,\n      n: 1,\n      b: 2,\n      r: 3,\n      q: 4,\n      k: 5\n    }[type];\n    return PIECE_KEYS[colorIndex][typeIndex][i];\n  }\n  _epKey() {\n    return this._epSquare === EMPTY ? 0n : EP_KEYS[this._epSquare & 7];\n  }\n  _castlingKey() {\n    const index = this._castling.w >> 5 | this._castling.b >> 3;\n    return CASTLING_KEYS[index];\n  }\n  _computeHash() {\n    let hash = 0n;\n    for (let i = Ox88.a8; i <= Ox88.h1; i++) {\n      // did we run off the end of the board\n      if (i & 0x88) {\n        i += 7;\n        continue;\n      }\n      if (this._board[i]) {\n        hash ^= this._pieceKey(i);\n      }\n    }\n    hash ^= this._epKey();\n    hash ^= this._castlingKey();\n    if (this._turn === 'b') {\n      hash ^= SIDE_KEY;\n    }\n    return hash;\n  }\n  /*\n   * Called when the initial board setup is changed with put() or remove().\n   * modifies the SetUp and FEN properties of the header object. If the FEN\n   * is equal to the default position, the SetUp and FEN are deleted the setup\n   * is only updated if history.length is zero, ie moves haven't been made.\n   */\n  _updateSetup(fen) {\n    if (this._history.length > 0) return;\n    if (fen !== DEFAULT_POSITION) {\n      this._header['SetUp'] = '1';\n      this._header['FEN'] = fen;\n    } else {\n      this._header['SetUp'] = null;\n      this._header['FEN'] = null;\n    }\n  }\n  reset() {\n    this.load(DEFAULT_POSITION);\n  }\n  get(square) {\n    return this._board[Ox88[square]];\n  }\n  findPiece(piece) {\n    const squares = [];\n    for (let i = Ox88.a8; i <= Ox88.h1; i++) {\n      // did we run off the end of the board\n      if (i & 0x88) {\n        i += 7;\n        continue;\n      }\n      // if empty square or wrong color\n      if (!this._board[i] || this._board[i]?.color !== piece.color) {\n        continue;\n      }\n      // check if square contains the requested piece\n      if (this._board[i].color === piece.color && this._board[i].type === piece.type) {\n        squares.push(algebraic(i));\n      }\n    }\n    return squares;\n  }\n  put({\n    type,\n    color\n  }, square) {\n    if (this._put({\n      type,\n      color\n    }, square)) {\n      this._updateCastlingRights();\n      this._updateEnPassantSquare();\n      this._updateSetup(this.fen());\n      return true;\n    }\n    return false;\n  }\n  _set(sq, piece) {\n    this._hash ^= this._pieceKey(sq);\n    this._board[sq] = piece;\n    this._hash ^= this._pieceKey(sq);\n  }\n  _put({\n    type,\n    color\n  }, square) {\n    // check for piece\n    if (SYMBOLS.indexOf(type.toLowerCase()) === -1) {\n      return false;\n    }\n    // check for valid square\n    if (!(square in Ox88)) {\n      return false;\n    }\n    const sq = Ox88[square];\n    // don't let the user place more than one king\n    if (type == KING && !(this._kings[color] == EMPTY || this._kings[color] == sq)) {\n      return false;\n    }\n    const currentPieceOnSquare = this._board[sq];\n    // if one of the kings will be replaced by the piece from args, set the `_kings` respective entry to `EMPTY`\n    if (currentPieceOnSquare && currentPieceOnSquare.type === KING) {\n      this._kings[currentPieceOnSquare.color] = EMPTY;\n    }\n    this._set(sq, {\n      type: type,\n      color: color\n    });\n    if (type === KING) {\n      this._kings[color] = sq;\n    }\n    return true;\n  }\n  _clear(sq) {\n    this._hash ^= this._pieceKey(sq);\n    delete this._board[sq];\n  }\n  remove(square) {\n    const piece = this.get(square);\n    this._clear(Ox88[square]);\n    if (piece && piece.type === KING) {\n      this._kings[piece.color] = EMPTY;\n    }\n    this._updateCastlingRights();\n    this._updateEnPassantSquare();\n    this._updateSetup(this.fen());\n    return piece;\n  }\n  _updateCastlingRights() {\n    this._hash ^= this._castlingKey();\n    const whiteKingInPlace = this._board[Ox88.e1]?.type === KING && this._board[Ox88.e1]?.color === WHITE;\n    const blackKingInPlace = this._board[Ox88.e8]?.type === KING && this._board[Ox88.e8]?.color === BLACK;\n    if (!whiteKingInPlace || this._board[Ox88.a1]?.type !== ROOK || this._board[Ox88.a1]?.color !== WHITE) {\n      this._castling.w &= -65;\n    }\n    if (!whiteKingInPlace || this._board[Ox88.h1]?.type !== ROOK || this._board[Ox88.h1]?.color !== WHITE) {\n      this._castling.w &= -33;\n    }\n    if (!blackKingInPlace || this._board[Ox88.a8]?.type !== ROOK || this._board[Ox88.a8]?.color !== BLACK) {\n      this._castling.b &= -65;\n    }\n    if (!blackKingInPlace || this._board[Ox88.h8]?.type !== ROOK || this._board[Ox88.h8]?.color !== BLACK) {\n      this._castling.b &= -33;\n    }\n    this._hash ^= this._castlingKey();\n  }\n  _updateEnPassantSquare() {\n    if (this._epSquare === EMPTY) {\n      return;\n    }\n    const startSquare = this._epSquare + (this._turn === WHITE ? -16 : 16);\n    const currentSquare = this._epSquare + (this._turn === WHITE ? 16 : -16);\n    const attackers = [currentSquare + 1, currentSquare - 1];\n    if (this._board[startSquare] !== null || this._board[this._epSquare] !== null || this._board[currentSquare]?.color !== swapColor(this._turn) || this._board[currentSquare]?.type !== PAWN) {\n      this._hash ^= this._epKey();\n      this._epSquare = EMPTY;\n      return;\n    }\n    const canCapture = square => !(square & 0x88) && this._board[square]?.color === this._turn && this._board[square]?.type === PAWN;\n    if (!attackers.some(canCapture)) {\n      this._hash ^= this._epKey();\n      this._epSquare = EMPTY;\n    }\n  }\n  _attacked(color, square, verbose) {\n    const attackers = [];\n    for (let i = Ox88.a8; i <= Ox88.h1; i++) {\n      // did we run off the end of the board\n      if (i & 0x88) {\n        i += 7;\n        continue;\n      }\n      // if empty square or wrong color\n      if (this._board[i] === undefined || this._board[i].color !== color) {\n        continue;\n      }\n      const piece = this._board[i];\n      const difference = i - square;\n      // skip - to/from square are the same\n      if (difference === 0) {\n        continue;\n      }\n      const index = difference + 119;\n      if (ATTACKS[index] & PIECE_MASKS[piece.type]) {\n        if (piece.type === PAWN) {\n          if (difference > 0 && piece.color === WHITE || difference <= 0 && piece.color === BLACK) {\n            if (!verbose) {\n              return true;\n            } else {\n              attackers.push(algebraic(i));\n            }\n          }\n          continue;\n        }\n        // if the piece is a knight or a king\n        if (piece.type === 'n' || piece.type === 'k') {\n          if (!verbose) {\n            return true;\n          } else {\n            attackers.push(algebraic(i));\n            continue;\n          }\n        }\n        const offset = RAYS[index];\n        let j = i + offset;\n        let blocked = false;\n        while (j !== square) {\n          if (this._board[j] != null) {\n            blocked = true;\n            break;\n          }\n          j += offset;\n        }\n        if (!blocked) {\n          if (!verbose) {\n            return true;\n          } else {\n            attackers.push(algebraic(i));\n            continue;\n          }\n        }\n      }\n    }\n    if (verbose) {\n      return attackers;\n    } else {\n      return false;\n    }\n  }\n  attackers(square, attackedBy) {\n    if (!attackedBy) {\n      return this._attacked(this._turn, Ox88[square], true);\n    } else {\n      return this._attacked(attackedBy, Ox88[square], true);\n    }\n  }\n  _isKingAttacked(color) {\n    const square = this._kings[color];\n    return square === -1 ? false : this._attacked(swapColor(color), square);\n  }\n  hash() {\n    return this._hash.toString(16);\n  }\n  isAttacked(square, attackedBy) {\n    return this._attacked(attackedBy, Ox88[square]);\n  }\n  isCheck() {\n    return this._isKingAttacked(this._turn);\n  }\n  inCheck() {\n    return this.isCheck();\n  }\n  isCheckmate() {\n    return this.isCheck() && this._moves().length === 0;\n  }\n  isStalemate() {\n    return !this.isCheck() && this._moves().length === 0;\n  }\n  isInsufficientMaterial() {\n    /*\n     * k.b. vs k.b. (of opposite colors) with mate in 1:\n     * 8/8/8/8/1b6/8/B1k5/K7 b - - 0 1\n     *\n     * k.b. vs k.n. with mate in 1:\n     * 8/8/8/8/1n6/8/B7/K1k5 b - - 2 1\n     */\n    const pieces = {\n      b: 0,\n      n: 0,\n      r: 0,\n      q: 0,\n      k: 0,\n      p: 0\n    };\n    const bishops = [];\n    let numPieces = 0;\n    let squareColor = 0;\n    for (let i = Ox88.a8; i <= Ox88.h1; i++) {\n      squareColor = (squareColor + 1) % 2;\n      if (i & 0x88) {\n        i += 7;\n        continue;\n      }\n      const piece = this._board[i];\n      if (piece) {\n        pieces[piece.type] = piece.type in pieces ? pieces[piece.type] + 1 : 1;\n        if (piece.type === BISHOP) {\n          bishops.push(squareColor);\n        }\n        numPieces++;\n      }\n    }\n    // k vs. k\n    if (numPieces === 2) {\n      return true;\n    } else if (\n    // k vs. kn .... or .... k vs. kb\n    numPieces === 3 && (pieces[BISHOP] === 1 || pieces[KNIGHT] === 1)) {\n      return true;\n    } else if (numPieces === pieces[BISHOP] + 2) {\n      // kb vs. kb where any number of bishops are all on the same color\n      let sum = 0;\n      const len = bishops.length;\n      for (let i = 0; i < len; i++) {\n        sum += bishops[i];\n      }\n      if (sum === 0 || sum === len) {\n        return true;\n      }\n    }\n    return false;\n  }\n  isThreefoldRepetition() {\n    return this._getPositionCount(this._hash) >= 3;\n  }\n  isDrawByFiftyMoves() {\n    return this._halfMoves >= 100; // 50 moves per side = 100 half moves\n  }\n  isDraw() {\n    return this.isDrawByFiftyMoves() || this.isStalemate() || this.isInsufficientMaterial() || this.isThreefoldRepetition();\n  }\n  isGameOver() {\n    return this.isCheckmate() || this.isDraw();\n  }\n  moves({\n    verbose = false,\n    square = undefined,\n    piece = undefined\n  } = {}) {\n    const moves = this._moves({\n      square,\n      piece\n    });\n    if (verbose) {\n      return moves.map(move => new Move(this, move));\n    } else {\n      return moves.map(move => this._moveToSan(move, moves));\n    }\n  }\n  _moves({\n    legal = true,\n    piece = undefined,\n    square = undefined\n  } = {}) {\n    const forSquare = square ? square.toLowerCase() : undefined;\n    const forPiece = piece?.toLowerCase();\n    const moves = [];\n    const us = this._turn;\n    const them = swapColor(us);\n    let firstSquare = Ox88.a8;\n    let lastSquare = Ox88.h1;\n    let singleSquare = false;\n    // are we generating moves for a single square?\n    if (forSquare) {\n      // illegal square, return empty moves\n      if (!(forSquare in Ox88)) {\n        return [];\n      } else {\n        firstSquare = lastSquare = Ox88[forSquare];\n        singleSquare = true;\n      }\n    }\n    for (let from = firstSquare; from <= lastSquare; from++) {\n      // did we run off the end of the board\n      if (from & 0x88) {\n        from += 7;\n        continue;\n      }\n      // empty square or opponent, skip\n      if (!this._board[from] || this._board[from].color === them) {\n        continue;\n      }\n      const {\n        type\n      } = this._board[from];\n      let to;\n      if (type === PAWN) {\n        if (forPiece && forPiece !== type) continue;\n        // single square, non-capturing\n        to = from + PAWN_OFFSETS[us][0];\n        if (!this._board[to]) {\n          addMove(moves, us, from, to, PAWN);\n          // double square\n          to = from + PAWN_OFFSETS[us][1];\n          if (SECOND_RANK[us] === rank(from) && !this._board[to]) {\n            addMove(moves, us, from, to, PAWN, undefined, BITS.BIG_PAWN);\n          }\n        }\n        // pawn captures\n        for (let j = 2; j < 4; j++) {\n          to = from + PAWN_OFFSETS[us][j];\n          if (to & 0x88) continue;\n          if (this._board[to]?.color === them) {\n            addMove(moves, us, from, to, PAWN, this._board[to].type, BITS.CAPTURE);\n          } else if (to === this._epSquare) {\n            addMove(moves, us, from, to, PAWN, PAWN, BITS.EP_CAPTURE);\n          }\n        }\n      } else {\n        if (forPiece && forPiece !== type) continue;\n        for (let j = 0, len = PIECE_OFFSETS[type].length; j < len; j++) {\n          const offset = PIECE_OFFSETS[type][j];\n          to = from;\n          while (true) {\n            to += offset;\n            if (to & 0x88) break;\n            if (!this._board[to]) {\n              addMove(moves, us, from, to, type);\n            } else {\n              // own color, stop loop\n              if (this._board[to].color === us) break;\n              addMove(moves, us, from, to, type, this._board[to].type, BITS.CAPTURE);\n              break;\n            }\n            /* break, if knight or king */\n            if (type === KNIGHT || type === KING) break;\n          }\n        }\n      }\n    }\n    /*\n     * check for castling if we're:\n     *   a) generating all moves, or\n     *   b) doing single square move generation on the king's square\n     */\n    if (forPiece === undefined || forPiece === KING) {\n      if (!singleSquare || lastSquare === this._kings[us]) {\n        // king-side castling\n        if (this._castling[us] & BITS.KSIDE_CASTLE) {\n          const castlingFrom = this._kings[us];\n          const castlingTo = castlingFrom + 2;\n          if (!this._board[castlingFrom + 1] && !this._board[castlingTo] && !this._attacked(them, this._kings[us]) && !this._attacked(them, castlingFrom + 1) && !this._attacked(them, castlingTo)) {\n            addMove(moves, us, this._kings[us], castlingTo, KING, undefined, BITS.KSIDE_CASTLE);\n          }\n        }\n        // queen-side castling\n        if (this._castling[us] & BITS.QSIDE_CASTLE) {\n          const castlingFrom = this._kings[us];\n          const castlingTo = castlingFrom - 2;\n          if (!this._board[castlingFrom - 1] && !this._board[castlingFrom - 2] && !this._board[castlingFrom - 3] && !this._attacked(them, this._kings[us]) && !this._attacked(them, castlingFrom - 1) && !this._attacked(them, castlingTo)) {\n            addMove(moves, us, this._kings[us], castlingTo, KING, undefined, BITS.QSIDE_CASTLE);\n          }\n        }\n      }\n    }\n    /*\n     * return all pseudo-legal moves (this includes moves that allow the king\n     * to be captured)\n     */\n    if (!legal || this._kings[us] === -1) {\n      return moves;\n    }\n    // filter out illegal moves\n    const legalMoves = [];\n    for (let i = 0, len = moves.length; i < len; i++) {\n      this._makeMove(moves[i]);\n      if (!this._isKingAttacked(us)) {\n        legalMoves.push(moves[i]);\n      }\n      this._undoMove();\n    }\n    return legalMoves;\n  }\n  move(move, {\n    strict = false\n  } = {}) {\n    /*\n     * The move function can be called with in the following parameters:\n     *\n     * .move('Nxb7')       <- argument is a case-sensitive SAN string\n     *\n     * .move({ from: 'h7', <- argument is a move object\n     *         to :'h8',\n     *         promotion: 'q' })\n     *\n     *\n     * An optional strict argument may be supplied to tell chess.js to\n     * strictly follow the SAN specification.\n     */\n    let moveObj = null;\n    if (typeof move === 'string') {\n      moveObj = this._moveFromSan(move, strict);\n    } else if (move === null) {\n      moveObj = this._moveFromSan(SAN_NULLMOVE, strict);\n    } else if (typeof move === 'object') {\n      const moves = this._moves();\n      // convert the pretty move object to an ugly move object\n      for (let i = 0, len = moves.length; i < len; i++) {\n        if (move.from === algebraic(moves[i].from) && move.to === algebraic(moves[i].to) && (!('promotion' in moves[i]) || move.promotion === moves[i].promotion)) {\n          moveObj = moves[i];\n          break;\n        }\n      }\n    }\n    // failed to find move\n    if (!moveObj) {\n      if (typeof move === 'string') {\n        throw new Error(`Invalid move: ${move}`);\n      } else {\n        throw new Error(`Invalid move: ${JSON.stringify(move)}`);\n      }\n    }\n    //disallow null moves when in check\n    if (this.isCheck() && moveObj.flags & BITS.NULL_MOVE) {\n      throw new Error('Null move not allowed when in check');\n    }\n    /*\n     * need to make a copy of move because we can't generate SAN after the move\n     * is made\n     */\n    const prettyMove = new Move(this, moveObj);\n    this._makeMove(moveObj);\n    this._incPositionCount();\n    return prettyMove;\n  }\n  _push(move) {\n    this._history.push({\n      move,\n      kings: {\n        b: this._kings.b,\n        w: this._kings.w\n      },\n      turn: this._turn,\n      castling: {\n        b: this._castling.b,\n        w: this._castling.w\n      },\n      epSquare: this._epSquare,\n      halfMoves: this._halfMoves,\n      moveNumber: this._moveNumber\n    });\n  }\n  _movePiece(from, to) {\n    this._hash ^= this._pieceKey(from);\n    this._board[to] = this._board[from];\n    delete this._board[from];\n    this._hash ^= this._pieceKey(to);\n  }\n  _makeMove(move) {\n    const us = this._turn;\n    const them = swapColor(us);\n    this._push(move);\n    if (move.flags & BITS.NULL_MOVE) {\n      if (us === BLACK) {\n        this._moveNumber++;\n      }\n      this._halfMoves++;\n      this._turn = them;\n      this._epSquare = EMPTY;\n      return;\n    }\n    this._hash ^= this._epKey();\n    this._hash ^= this._castlingKey();\n    if (move.captured) {\n      this._hash ^= this._pieceKey(move.to);\n    }\n    this._movePiece(move.from, move.to);\n    // if ep capture, remove the captured pawn\n    if (move.flags & BITS.EP_CAPTURE) {\n      if (this._turn === BLACK) {\n        this._clear(move.to - 16);\n      } else {\n        this._clear(move.to + 16);\n      }\n    }\n    // if pawn promotion, replace with new piece\n    if (move.promotion) {\n      this._clear(move.to);\n      this._set(move.to, {\n        type: move.promotion,\n        color: us\n      });\n    }\n    // if we moved the king\n    if (this._board[move.to].type === KING) {\n      this._kings[us] = move.to;\n      // if we castled, move the rook next to the king\n      if (move.flags & BITS.KSIDE_CASTLE) {\n        const castlingTo = move.to - 1;\n        const castlingFrom = move.to + 1;\n        this._movePiece(castlingFrom, castlingTo);\n      } else if (move.flags & BITS.QSIDE_CASTLE) {\n        const castlingTo = move.to + 1;\n        const castlingFrom = move.to - 2;\n        this._movePiece(castlingFrom, castlingTo);\n      }\n      // turn off castling\n      this._castling[us] = 0;\n    }\n    // turn off castling if we move a rook\n    if (this._castling[us]) {\n      for (let i = 0, len = ROOKS[us].length; i < len; i++) {\n        if (move.from === ROOKS[us][i].square && this._castling[us] & ROOKS[us][i].flag) {\n          this._castling[us] ^= ROOKS[us][i].flag;\n          break;\n        }\n      }\n    }\n    // turn off castling if we capture a rook\n    if (this._castling[them]) {\n      for (let i = 0, len = ROOKS[them].length; i < len; i++) {\n        if (move.to === ROOKS[them][i].square && this._castling[them] & ROOKS[them][i].flag) {\n          this._castling[them] ^= ROOKS[them][i].flag;\n          break;\n        }\n      }\n    }\n    this._hash ^= this._castlingKey();\n    // if big pawn move, update the en passant square\n    if (move.flags & BITS.BIG_PAWN) {\n      let epSquare;\n      if (us === BLACK) {\n        epSquare = move.to - 16;\n      } else {\n        epSquare = move.to + 16;\n      }\n      if (!(move.to - 1 & 0x88) && this._board[move.to - 1]?.type === PAWN && this._board[move.to - 1]?.color === them || !(move.to + 1 & 0x88) && this._board[move.to + 1]?.type === PAWN && this._board[move.to + 1]?.color === them) {\n        this._epSquare = epSquare;\n        this._hash ^= this._epKey();\n      } else {\n        this._epSquare = EMPTY;\n      }\n    } else {\n      this._epSquare = EMPTY;\n    }\n    // reset the 50 move counter if a pawn is moved or a piece is captured\n    if (move.piece === PAWN) {\n      this._halfMoves = 0;\n    } else if (move.flags & (BITS.CAPTURE | BITS.EP_CAPTURE)) {\n      this._halfMoves = 0;\n    } else {\n      this._halfMoves++;\n    }\n    if (us === BLACK) {\n      this._moveNumber++;\n    }\n    this._turn = them;\n    this._hash ^= SIDE_KEY;\n  }\n  undo() {\n    const hash = this._hash;\n    const move = this._undoMove();\n    if (move) {\n      const prettyMove = new Move(this, move);\n      this._decPositionCount(hash);\n      return prettyMove;\n    }\n    return null;\n  }\n  _undoMove() {\n    const old = this._history.pop();\n    if (old === undefined) {\n      return null;\n    }\n    this._hash ^= this._epKey();\n    this._hash ^= this._castlingKey();\n    const move = old.move;\n    this._kings = old.kings;\n    this._turn = old.turn;\n    this._castling = old.castling;\n    this._epSquare = old.epSquare;\n    this._halfMoves = old.halfMoves;\n    this._moveNumber = old.moveNumber;\n    this._hash ^= this._epKey();\n    this._hash ^= this._castlingKey();\n    this._hash ^= SIDE_KEY;\n    const us = this._turn;\n    const them = swapColor(us);\n    if (move.flags & BITS.NULL_MOVE) {\n      return move;\n    }\n    this._movePiece(move.to, move.from);\n    // to undo any promotions\n    if (move.piece) {\n      this._clear(move.from);\n      this._set(move.from, {\n        type: move.piece,\n        color: us\n      });\n    }\n    if (move.captured) {\n      if (move.flags & BITS.EP_CAPTURE) {\n        // en passant capture\n        let index;\n        if (us === BLACK) {\n          index = move.to - 16;\n        } else {\n          index = move.to + 16;\n        }\n        this._set(index, {\n          type: PAWN,\n          color: them\n        });\n      } else {\n        // regular capture\n        this._set(move.to, {\n          type: move.captured,\n          color: them\n        });\n      }\n    }\n    if (move.flags & (BITS.KSIDE_CASTLE | BITS.QSIDE_CASTLE)) {\n      let castlingTo, castlingFrom;\n      if (move.flags & BITS.KSIDE_CASTLE) {\n        castlingTo = move.to + 1;\n        castlingFrom = move.to - 1;\n      } else {\n        castlingTo = move.to - 2;\n        castlingFrom = move.to + 1;\n      }\n      this._movePiece(castlingFrom, castlingTo);\n    }\n    return move;\n  }\n  pgn({\n    newline = '\\n',\n    maxWidth = 0\n  } = {}) {\n    /*\n     * using the specification from http://www.chessclub.com/help/PGN-spec\n     * example for html usage: .pgn({ max_width: 72, newline_char: \"<br />\" })\n     */\n    const result = [];\n    let headerExists = false;\n    /* add the PGN header information */\n    for (const i in this._header) {\n      /*\n       * TODO: order of enumerated properties in header object is not\n       * guaranteed, see ECMA-262 spec (section 12.6.4)\n       *\n       * By using HEADER_TEMPLATE, the order of tags should be preserved; we\n       * do have to check for null placeholders, though, and omit them\n       */\n      const headerTag = this._header[i];\n      if (headerTag) result.push(`[${i} \"${this._header[i]}\"]` + newline);\n      headerExists = true;\n    }\n    if (headerExists && this._history.length) {\n      result.push(newline);\n    }\n    const appendComment = moveString => {\n      const comment = this._comments[this.fen()];\n      if (typeof comment !== 'undefined') {\n        const delimiter = moveString.length > 0 ? ' ' : '';\n        moveString = `${moveString}${delimiter}{${comment}}`;\n      }\n      return moveString;\n    };\n    // pop all of history onto reversed_history\n    const reversedHistory = [];\n    while (this._history.length > 0) {\n      reversedHistory.push(this._undoMove());\n    }\n    const moves = [];\n    let moveString = '';\n    // special case of a commented starting position with no moves\n    if (reversedHistory.length === 0) {\n      moves.push(appendComment(''));\n    }\n    // build the list of moves.  a move_string looks like: \"3. e3 e6\"\n    while (reversedHistory.length > 0) {\n      moveString = appendComment(moveString);\n      const move = reversedHistory.pop();\n      // make TypeScript stop complaining about move being undefined\n      if (!move) {\n        break;\n      }\n      // if the position started with black to move, start PGN with #. ...\n      if (!this._history.length && move.color === 'b') {\n        const prefix = `${this._moveNumber}. ...`;\n        // is there a comment preceding the first move?\n        moveString = moveString ? `${moveString} ${prefix}` : prefix;\n      } else if (move.color === 'w') {\n        // store the previous generated move_string if we have one\n        if (moveString.length) {\n          moves.push(moveString);\n        }\n        moveString = this._moveNumber + '.';\n      }\n      moveString = moveString + ' ' + this._moveToSan(move, this._moves({\n        legal: true\n      }));\n      this._makeMove(move);\n    }\n    // are there any other leftover moves?\n    if (moveString.length) {\n      moves.push(appendComment(moveString));\n    }\n    // is there a result? (there ALWAYS has to be a result according to spec; see Seven Tag Roster)\n    moves.push(this._header.Result || '*');\n    /*\n     * history should be back to what it was before we started generating PGN,\n     * so join together moves\n     */\n    if (maxWidth === 0) {\n      return result.join('') + moves.join(' ');\n    }\n    // TODO (jah): huh?\n    const strip = function () {\n      if (result.length > 0 && result[result.length - 1] === ' ') {\n        result.pop();\n        return true;\n      }\n      return false;\n    };\n    // NB: this does not preserve comment whitespace.\n    const wrapComment = function (width, move) {\n      for (const token of move.split(' ')) {\n        if (!token) {\n          continue;\n        }\n        if (width + token.length > maxWidth) {\n          while (strip()) {\n            width--;\n          }\n          result.push(newline);\n          width = 0;\n        }\n        result.push(token);\n        width += token.length;\n        result.push(' ');\n        width++;\n      }\n      if (strip()) {\n        width--;\n      }\n      return width;\n    };\n    // wrap the PGN output at max_width\n    let currentWidth = 0;\n    for (let i = 0; i < moves.length; i++) {\n      if (currentWidth + moves[i].length > maxWidth) {\n        if (moves[i].includes('{')) {\n          currentWidth = wrapComment(currentWidth, moves[i]);\n          continue;\n        }\n      }\n      // if the current move will push past max_width\n      if (currentWidth + moves[i].length > maxWidth && i !== 0) {\n        // don't end the line with whitespace\n        if (result[result.length - 1] === ' ') {\n          result.pop();\n        }\n        result.push(newline);\n        currentWidth = 0;\n      } else if (i !== 0) {\n        result.push(' ');\n        currentWidth++;\n      }\n      result.push(moves[i]);\n      currentWidth += moves[i].length;\n    }\n    return result.join('');\n  }\n  /**\n   * @deprecated Use `setHeader` and `getHeaders` instead. This method will return null header tags (which is not what you want)\n   */\n  header(...args) {\n    for (let i = 0; i < args.length; i += 2) {\n      if (typeof args[i] === 'string' && typeof args[i + 1] === 'string') {\n        this._header[args[i]] = args[i + 1];\n      }\n    }\n    return this._header;\n  }\n  // TODO: value validation per spec\n  setHeader(key, value) {\n    this._header[key] = value ?? SEVEN_TAG_ROSTER[key] ?? null;\n    return this.getHeaders();\n  }\n  removeHeader(key) {\n    if (key in this._header) {\n      this._header[key] = SEVEN_TAG_ROSTER[key] || null;\n      return true;\n    }\n    return false;\n  }\n  // return only non-null headers (omit placemarker nulls)\n  getHeaders() {\n    const nonNullHeaders = {};\n    for (const [key, value] of Object.entries(this._header)) {\n      if (value !== null) {\n        nonNullHeaders[key] = value;\n      }\n    }\n    return nonNullHeaders;\n  }\n  loadPgn(pgn, {\n    strict = false,\n    newlineChar = '\\r?\\n'\n  } = {}) {\n    // If newlineChar is not the default, replace all instances with \\n\n    if (newlineChar !== '\\r?\\n') {\n      pgn = pgn.replace(new RegExp(newlineChar, 'g'), '\\n');\n    }\n    const parsedPgn = peg$parse(pgn);\n    // Put the board in the starting position\n    this.reset();\n    // parse PGN header\n    const headers = parsedPgn.headers;\n    let fen = '';\n    for (const key in headers) {\n      // check to see user is including fen (possibly with wrong tag case)\n      if (key.toLowerCase() === 'fen') {\n        fen = headers[key];\n      }\n      this.header(key, headers[key]);\n    }\n    /*\n     * the permissive parser should attempt to load a fen tag, even if it's the\n     * wrong case and doesn't include a corresponding [SetUp \"1\"] tag\n     */\n    if (!strict) {\n      if (fen) {\n        this.load(fen, {\n          preserveHeaders: true\n        });\n      }\n    } else {\n      /*\n       * strict parser - load the starting position indicated by [Setup '1']\n       * and [FEN position]\n       */\n      if (headers['SetUp'] === '1') {\n        if (!('FEN' in headers)) {\n          throw new Error('Invalid PGN: FEN tag must be supplied with SetUp tag');\n        }\n        // don't clear the headers when loading\n        this.load(headers['FEN'], {\n          preserveHeaders: true\n        });\n      }\n    }\n    let node = parsedPgn.root;\n    while (node) {\n      if (node.move) {\n        const move = this._moveFromSan(node.move, strict);\n        if (move == null) {\n          throw new Error(`Invalid move in PGN: ${node.move}`);\n        } else {\n          this._makeMove(move);\n          this._incPositionCount();\n        }\n      }\n      if (node.comment !== undefined) {\n        this._comments[this.fen()] = node.comment;\n      }\n      node = node.variations[0];\n    }\n    /*\n     * Per section 8.2.6 of the PGN spec, the Result tag pair must match match\n     * the termination marker. Only do this when headers are present, but the\n     * result tag is missing\n     */\n    const result = parsedPgn.result;\n    if (result && Object.keys(this._header).length && this._header['Result'] !== result) {\n      this.setHeader('Result', result);\n    }\n  }\n  /*\n   * Convert a move from 0x88 coordinates to Standard Algebraic Notation\n   * (SAN)\n   *\n   * @param {boolean} strict Use the strict SAN parser. It will throw errors\n   * on overly disambiguated moves (see below):\n   *\n   * r1bqkbnr/ppp2ppp/2n5/1B1pP3/4P3/8/PPPP2PP/RNBQK1NR b KQkq - 2 4\n   * 4. ... Nge7 is overly disambiguated because the knight on c6 is pinned\n   * 4. ... Ne7 is technically the valid SAN\n   */\n  _moveToSan(move, moves) {\n    let output = '';\n    if (move.flags & BITS.KSIDE_CASTLE) {\n      output = 'O-O';\n    } else if (move.flags & BITS.QSIDE_CASTLE) {\n      output = 'O-O-O';\n    } else if (move.flags & BITS.NULL_MOVE) {\n      return SAN_NULLMOVE;\n    } else {\n      if (move.piece !== PAWN) {\n        const disambiguator = getDisambiguator(move, moves);\n        output += move.piece.toUpperCase() + disambiguator;\n      }\n      if (move.flags & (BITS.CAPTURE | BITS.EP_CAPTURE)) {\n        if (move.piece === PAWN) {\n          output += algebraic(move.from)[0];\n        }\n        output += 'x';\n      }\n      output += algebraic(move.to);\n      if (move.promotion) {\n        output += '=' + move.promotion.toUpperCase();\n      }\n    }\n    this._makeMove(move);\n    if (this.isCheck()) {\n      if (this.isCheckmate()) {\n        output += '#';\n      } else {\n        output += '+';\n      }\n    }\n    this._undoMove();\n    return output;\n  }\n  // convert a move from Standard Algebraic Notation (SAN) to 0x88 coordinates\n  _moveFromSan(move, strict = false) {\n    // strip off any move decorations: e.g Nf3+?! becomes Nf3\n    let cleanMove = strippedSan(move);\n    if (!strict) {\n      if (cleanMove === '0-0') {\n        cleanMove = 'O-O';\n      } else if (cleanMove === '0-0-0') {\n        cleanMove = 'O-O-O';\n      }\n    }\n    //first implementation of null with a dummy move (black king moves from a8 to a8), maybe this can be implemented better\n    if (cleanMove == SAN_NULLMOVE) {\n      const res = {\n        color: this._turn,\n        from: 0,\n        to: 0,\n        piece: 'k',\n        flags: BITS.NULL_MOVE\n      };\n      return res;\n    }\n    let pieceType = inferPieceType(cleanMove);\n    let moves = this._moves({\n      legal: true,\n      piece: pieceType\n    });\n    // strict parser\n    for (let i = 0, len = moves.length; i < len; i++) {\n      if (cleanMove === strippedSan(this._moveToSan(moves[i], moves))) {\n        return moves[i];\n      }\n    }\n    // the strict parser failed\n    if (strict) {\n      return null;\n    }\n    let piece = undefined;\n    let matches = undefined;\n    let from = undefined;\n    let to = undefined;\n    let promotion = undefined;\n    /*\n     * The default permissive (non-strict) parser allows the user to parse\n     * non-standard chess notations. This parser is only run after the strict\n     * Standard Algebraic Notation (SAN) parser has failed.\n     *\n     * When running the permissive parser, we'll run a regex to grab the piece, the\n     * to/from square, and an optional promotion piece. This regex will\n     * parse common non-standard notation like: Pe2-e4, Rc1c4, Qf3xf7,\n     * f7f8q, b1c3\n     *\n     * NOTE: Some positions and moves may be ambiguous when using the permissive\n     * parser. For example, in this position: 6k1/8/8/B7/8/8/8/BN4K1 w - - 0 1,\n     * the move b1c3 may be interpreted as Nc3 or B1c3 (a disambiguated bishop\n     * move). In these cases, the permissive parser will default to the most\n     * basic interpretation (which is b1c3 parsing to Nc3).\n     */\n    let overlyDisambiguated = false;\n    matches = cleanMove.match(/([pnbrqkPNBRQK])?([a-h][1-8])x?-?([a-h][1-8])([qrbnQRBN])?/);\n    if (matches) {\n      piece = matches[1];\n      from = matches[2];\n      to = matches[3];\n      promotion = matches[4];\n      if (from.length == 1) {\n        overlyDisambiguated = true;\n      }\n    } else {\n      /*\n       * The [a-h]?[1-8]? portion of the regex below handles moves that may be\n       * overly disambiguated (e.g. Nge7 is unnecessary and non-standard when\n       * there is one legal knight move to e7). In this case, the value of\n       * 'from' variable will be a rank or file, not a square.\n       */\n      matches = cleanMove.match(/([pnbrqkPNBRQK])?([a-h]?[1-8]?)x?-?([a-h][1-8])([qrbnQRBN])?/);\n      if (matches) {\n        piece = matches[1];\n        from = matches[2];\n        to = matches[3];\n        promotion = matches[4];\n        if (from.length == 1) {\n          overlyDisambiguated = true;\n        }\n      }\n    }\n    pieceType = inferPieceType(cleanMove);\n    moves = this._moves({\n      legal: true,\n      piece: piece ? piece : pieceType\n    });\n    if (!to) {\n      return null;\n    }\n    for (let i = 0, len = moves.length; i < len; i++) {\n      if (!from) {\n        // if there is no from square, it could be just 'x' missing from a capture\n        if (cleanMove === strippedSan(this._moveToSan(moves[i], moves)).replace('x', '')) {\n          return moves[i];\n        }\n        // hand-compare move properties with the results from our permissive regex\n      } else if ((!piece || piece.toLowerCase() == moves[i].piece) && Ox88[from] == moves[i].from && Ox88[to] == moves[i].to && (!promotion || promotion.toLowerCase() == moves[i].promotion)) {\n        return moves[i];\n      } else if (overlyDisambiguated) {\n        /*\n         * SPECIAL CASE: we parsed a move string that may have an unneeded\n         * rank/file disambiguator (e.g. Nge7).  The 'from' variable will\n         */\n        const square = algebraic(moves[i].from);\n        if ((!piece || piece.toLowerCase() == moves[i].piece) && Ox88[to] == moves[i].to && (from == square[0] || from == square[1]) && (!promotion || promotion.toLowerCase() == moves[i].promotion)) {\n          return moves[i];\n        }\n      }\n    }\n    return null;\n  }\n  ascii() {\n    let s = '   +------------------------+\\n';\n    for (let i = Ox88.a8; i <= Ox88.h1; i++) {\n      // display the rank\n      if (file(i) === 0) {\n        s += ' ' + '87654321'[rank(i)] + ' |';\n      }\n      if (this._board[i]) {\n        const piece = this._board[i].type;\n        const color = this._board[i].color;\n        const symbol = color === WHITE ? piece.toUpperCase() : piece.toLowerCase();\n        s += ' ' + symbol + ' ';\n      } else {\n        s += ' . ';\n      }\n      if (i + 1 & 0x88) {\n        s += '|\\n';\n        i += 8;\n      }\n    }\n    s += '   +------------------------+\\n';\n    s += '     a  b  c  d  e  f  g  h';\n    return s;\n  }\n  perft(depth) {\n    const moves = this._moves({\n      legal: false\n    });\n    let nodes = 0;\n    const color = this._turn;\n    for (let i = 0, len = moves.length; i < len; i++) {\n      this._makeMove(moves[i]);\n      if (!this._isKingAttacked(color)) {\n        if (depth - 1 > 0) {\n          nodes += this.perft(depth - 1);\n        } else {\n          nodes++;\n        }\n      }\n      this._undoMove();\n    }\n    return nodes;\n  }\n  setTurn(color) {\n    if (this._turn == color) {\n      return false;\n    }\n    this.move('--');\n    return true;\n  }\n  turn() {\n    return this._turn;\n  }\n  board() {\n    const output = [];\n    let row = [];\n    for (let i = Ox88.a8; i <= Ox88.h1; i++) {\n      if (this._board[i] == null) {\n        row.push(null);\n      } else {\n        row.push({\n          square: algebraic(i),\n          type: this._board[i].type,\n          color: this._board[i].color\n        });\n      }\n      if (i + 1 & 0x88) {\n        output.push(row);\n        row = [];\n        i += 8;\n      }\n    }\n    return output;\n  }\n  squareColor(square) {\n    if (square in Ox88) {\n      const sq = Ox88[square];\n      return (rank(sq) + file(sq)) % 2 === 0 ? 'light' : 'dark';\n    }\n    return null;\n  }\n  history({\n    verbose = false\n  } = {}) {\n    const reversedHistory = [];\n    const moveHistory = [];\n    while (this._history.length > 0) {\n      reversedHistory.push(this._undoMove());\n    }\n    while (true) {\n      const move = reversedHistory.pop();\n      if (!move) {\n        break;\n      }\n      if (verbose) {\n        moveHistory.push(new Move(this, move));\n      } else {\n        moveHistory.push(this._moveToSan(move, this._moves()));\n      }\n      this._makeMove(move);\n    }\n    return moveHistory;\n  }\n  /*\n   * Keeps track of position occurrence counts for the purpose of repetition\n   * checking. Old positions are removed from the map if their counts are reduced to 0.\n   */\n  _getPositionCount(hash) {\n    return this._positionCount.get(hash) ?? 0;\n  }\n  _incPositionCount() {\n    this._positionCount.set(this._hash, (this._positionCount.get(this._hash) ?? 0) + 1);\n  }\n  _decPositionCount(hash) {\n    const currentCount = this._positionCount.get(hash) ?? 0;\n    if (currentCount === 1) {\n      this._positionCount.delete(hash);\n    } else {\n      this._positionCount.set(hash, currentCount - 1);\n    }\n  }\n  _pruneComments() {\n    const reversedHistory = [];\n    const currentComments = {};\n    const copyComment = fen => {\n      if (fen in this._comments) {\n        currentComments[fen] = this._comments[fen];\n      }\n    };\n    while (this._history.length > 0) {\n      reversedHistory.push(this._undoMove());\n    }\n    copyComment(this.fen());\n    while (true) {\n      const move = reversedHistory.pop();\n      if (!move) {\n        break;\n      }\n      this._makeMove(move);\n      copyComment(this.fen());\n    }\n    this._comments = currentComments;\n  }\n  getComment() {\n    return this._comments[this.fen()];\n  }\n  setComment(comment) {\n    this._comments[this.fen()] = comment.replace('{', '[').replace('}', ']');\n  }\n  /**\n   * @deprecated Renamed to `removeComment` for consistency\n   */\n  deleteComment() {\n    return this.removeComment();\n  }\n  removeComment() {\n    const comment = this._comments[this.fen()];\n    delete this._comments[this.fen()];\n    return comment;\n  }\n  getComments() {\n    this._pruneComments();\n    return Object.keys(this._comments).map(fen => {\n      return {\n        fen: fen,\n        comment: this._comments[fen]\n      };\n    });\n  }\n  /**\n   * @deprecated Renamed to `removeComments` for consistency\n   */\n  deleteComments() {\n    return this.removeComments();\n  }\n  removeComments() {\n    this._pruneComments();\n    return Object.keys(this._comments).map(fen => {\n      const comment = this._comments[fen];\n      delete this._comments[fen];\n      return {\n        fen: fen,\n        comment: comment\n      };\n    });\n  }\n  setCastlingRights(color, rights) {\n    for (const side of [KING, QUEEN]) {\n      if (rights[side] !== undefined) {\n        if (rights[side]) {\n          this._castling[color] |= SIDES[side];\n        } else {\n          this._castling[color] &= ~SIDES[side];\n        }\n      }\n    }\n    this._updateCastlingRights();\n    const result = this.getCastlingRights(color);\n    return (rights[KING] === undefined || rights[KING] === result[KING]) && (rights[QUEEN] === undefined || rights[QUEEN] === result[QUEEN]);\n  }\n  getCastlingRights(color) {\n    return {\n      [KING]: (this._castling[color] & SIDES[KING]) !== 0,\n      [QUEEN]: (this._castling[color] & SIDES[QUEEN]) !== 0\n    };\n  }\n  moveNumber() {\n    return this._moveNumber;\n  }\n}\nexport { BISHOP, BLACK, Chess, DEFAULT_POSITION, KING, KNIGHT, Move, PAWN, QUEEN, ROOK, SEVEN_TAG_ROSTER, SQUARES, WHITE, validateFen, xoroshiro128 };","map":{"version":3,"names":["rootNode","comment","variations","node","move","suffix","nag","lineToTree","nodes","root","rest","parent","child","pgn","headers","game","marker","next","result","undefined","peg$subclass","C","constructor","prototype","peg$SyntaxError","message","expected","found","location","self","Error","call","Object","setPrototypeOf","name","peg$padEnd","str","targetLength","padString","length","repeat","slice","format","sources","src","k","source","text","split","s","start","offset_s","offset","loc","line","column","e","end","filler","toString","last","hatLen","buildMessage","DESCRIBE_EXPECTATION_FNS","literal","expectation","literalEscape","class","escapedParts","parts","map","part","Array","isArray","classEscape","inverted","join","any","other","description","hex","ch","charCodeAt","toUpperCase","replace","describeExpectation","type","describeExpected","descriptions","i","j","sort","describeFound","peg$parse","input","options","peg$FAILED","peg$source","grammarSource","peg$startRuleFunctions","peg$parsepgn","peg$startRuleFunction","peg$c0","peg$c1","peg$c2","peg$c3","peg$c4","peg$c5","peg$c6","peg$c7","peg$c8","peg$c9","peg$c10","peg$c11","peg$c12","peg$c13","peg$c14","peg$c15","peg$c16","peg$c17","peg$r0","peg$r1","peg$r2","peg$r3","peg$r4","peg$r5","peg$r6","peg$r7","peg$r8","peg$r9","peg$e0","peg$otherExpectation","peg$e1","peg$literalExpectation","peg$e2","peg$e3","peg$e4","peg$e5","peg$classExpectation","peg$e6","peg$e7","peg$e8","peg$e9","peg$e10","peg$e11","peg$e12","peg$e13","peg$e14","peg$e15","peg$e16","peg$e17","peg$e18","peg$e19","peg$e20","peg$e21","peg$e22","peg$e23","peg$e24","peg$e25","peg$e26","peg$e27","peg$e28","peg$e29","peg$e30","peg$e31","peg$e32","peg$e33","peg$e34","peg$e35","peg$e36","peg$e37","peg$e38","peg$e39","peg$f0","peg$f1","tagPairs","fromEntries","peg$f2","tagName","tagValue","peg$f3","peg$f4","moves","flat","peg$f5","san","peg$f6","peg$f7","peg$f8","trim","peg$f9","peg$f10","peg$currPos","peg$posDetailsCache","peg$maxFailPos","peg$maxFailExpected","peg$silentFails","peg$result","startRule","ignoreCase","peg$endExpectation","peg$computePosDetails","pos","details","p","peg$computeLocation","startPos","endPos","startPosDetails","endPosDetails","res","peg$fail","push","peg$buildStructuredError","s0","s1","s2","peg$parsetagPairSection","peg$parsemoveTextSection","peg$parsetagPair","peg$parse_","s4","s6","s7","s8","s10","peg$parsetagName","peg$parsetagValue","charAt","test","substring","s3","peg$parseline","peg$parsegameTerminationMarker","peg$parsecomment","peg$parsemove","s5","s9","peg$parsemoveNumber","peg$parsesan","peg$parsesuffixAnnotation","peg$parsenag","peg$parsevariation","substr","peg$parsebraceComment","peg$parserestOfLineComment","peg$library","MASK64","rotl","x","wrappingMul","y","xoroshiro128","state","BigInt","rand","PIECE_KEYS","from","EP_KEYS","CASTLING_KEYS","SIDE_KEY","WHITE","BLACK","PAWN","KNIGHT","BISHOP","ROOK","QUEEN","KING","DEFAULT_POSITION","Move","color","to","piece","captured","promotion","flags","lan","before","after","chess","internal","fromAlgebraic","algebraic","toAlgebraic","legal","fen","flag","BITS","FLAGS","isCapture","indexOf","isPromotion","isEnPassant","isKingsideCastle","isQueensideCastle","isBigPawn","EMPTY","NORMAL","CAPTURE","BIG_PAWN","EP_CAPTURE","PROMOTION","KSIDE_CASTLE","QSIDE_CASTLE","NULL_MOVE","SQUARES","SEVEN_TAG_ROSTER","Event","Site","Date","Round","White","Black","Result","SUPLEMENTAL_TAGS","WhiteTitle","BlackTitle","WhiteElo","BlackElo","WhiteUSCF","BlackUSCF","WhiteNA","BlackNA","WhiteType","BlackType","EventDate","EventSponsor","Section","Stage","Board","Opening","Variation","SubVariation","ECO","NIC","Time","UTCTime","UTCDate","TimeControl","SetUp","FEN","Termination","Annotator","Mode","PlyCount","HEADER_TEMPLATE","Ox88","a8","b8","c8","d8","e8","f8","g8","h8","a7","b7","c7","d7","e7","f7","g7","h7","a6","b6","c6","d6","e6","f6","g6","h6","a5","b5","c5","d5","e5","f5","g5","h5","a4","b4","c4","d4","e4","f4","g4","h4","a3","b3","c3","d3","e3","f3","g3","h3","a2","b2","c2","d2","e2","f2","g2","h2","a1","b1","c1","d1","e1","f1","g1","h1","PAWN_OFFSETS","b","w","PIECE_OFFSETS","n","r","q","ATTACKS","RAYS","PIECE_MASKS","SYMBOLS","PROMOTIONS","RANK_1","RANK_2","RANK_7","RANK_8","SIDES","ROOKS","square","SECOND_RANK","SAN_NULLMOVE","rank","file","isDigit","c","f","swapColor","validateFen","tokens","ok","error","moveNumber","parseInt","isNaN","halfMoves","rows","sumFields","previousWasNumber","kings","regex","match","some","char","getDisambiguator","ambiguities","sameRank","sameFile","len","ambigFrom","ambigTo","ambigPiece","addMove","inferPieceType","pieceType","matches","toLowerCase","strippedSan","Chess","_board","_turn","_header","_kings","_epSquare","_halfMoves","_moveNumber","_history","_comments","_castling","_hash","_positionCount","Map","skipValidation","load","clear","preserveHeaders","_computeHash","adjustments","concat","position","_put","_updateSetup","_incPositionCount","forceEnpassantSquare","empty","castling","epSquare","bigPawnSquare","squares","_makeMove","isLegal","_isKingAttacked","_undoMove","_pieceKey","colorIndex","typeIndex","_epKey","_castlingKey","index","hash","reset","get","findPiece","put","_updateCastlingRights","_updateEnPassantSquare","_set","sq","currentPieceOnSquare","_clear","remove","whiteKingInPlace","blackKingInPlace","startSquare","currentSquare","attackers","canCapture","_attacked","verbose","difference","blocked","attackedBy","isAttacked","isCheck","inCheck","isCheckmate","_moves","isStalemate","isInsufficientMaterial","pieces","bishops","numPieces","squareColor","sum","isThreefoldRepetition","_getPositionCount","isDrawByFiftyMoves","isDraw","isGameOver","_moveToSan","forSquare","forPiece","us","them","firstSquare","lastSquare","singleSquare","castlingFrom","castlingTo","legalMoves","strict","moveObj","_moveFromSan","JSON","stringify","prettyMove","_push","turn","_movePiece","undo","_decPositionCount","old","pop","newline","maxWidth","headerExists","headerTag","appendComment","moveString","delimiter","reversedHistory","prefix","strip","wrapComment","width","token","currentWidth","includes","header","args","setHeader","key","value","getHeaders","removeHeader","nonNullHeaders","entries","loadPgn","newlineChar","RegExp","parsedPgn","keys","output","disambiguator","cleanMove","overlyDisambiguated","ascii","symbol","perft","depth","setTurn","board","row","history","moveHistory","set","currentCount","delete","_pruneComments","currentComments","copyComment","getComment","setComment","deleteComment","removeComment","getComments","deleteComments","removeComments","setCastlingRights","rights","side","getCastlingRights"],"sources":["/Users/alessiobove/Desktop/javascript_projects/The_Final_Project/chess_website/chess/node_modules/chess.js/src/pgn.js","../../../src/chess.ts"],"sourcesContent":["// @generated by Peggy 4.2.0.\n//\n// https://peggyjs.org/\n\n\n\n  function rootNode(comment) {\n  \treturn comment !== null ? { comment, variations: [] } : { variations: []}\n  }\n\n  function node(move, suffix, nag, comment, variations) {\n  \tconst node = { move, variations }\n\n    if (suffix) {\n    \tnode.suffix = suffix\n    }\n\n    if (nag) {\n    \tnode.nag = nag\n    }\n\n    if (comment !== null) {\n    \tnode.comment = comment\n    }\n\n    return node\n  }\n\n  function lineToTree(...nodes) {\n  \tconst [root, ...rest] = nodes;\n\n    let parent = root\n\n    for (const child of rest) {\n    \tif (child !== null) {\n        \tparent.variations = [child, ...child.variations]\n            child.variations = []\n            parent = child\n        }\n    }\n\n  \treturn root\n  }\n\n  function pgn(headers, game) {\n  \tif (game.marker && game.marker.comment) {\n    \tlet node = game.root\n        while (true) {\n        \tconst next = node.variations[0]\n            if (!next) {\n            \tnode.comment = game.marker.comment\n            \tbreak\n            }\n            node = next\n        }\n    }\n\n  \treturn {\n    \theaders,\n        root: game.root,\n        result: (game.marker && game.marker.result) ?? undefined\n    }\n  }\n\nfunction peg$subclass(child, parent) {\n  function C() { this.constructor = child; }\n  C.prototype = parent.prototype;\n  child.prototype = new C();\n}\n\nfunction peg$SyntaxError(message, expected, found, location) {\n  var self = Error.call(this, message);\n  // istanbul ignore next Check is a necessary evil to support older environments\n  if (Object.setPrototypeOf) {\n    Object.setPrototypeOf(self, peg$SyntaxError.prototype);\n  }\n  self.expected = expected;\n  self.found = found;\n  self.location = location;\n  self.name = \"SyntaxError\";\n  return self;\n}\n\npeg$subclass(peg$SyntaxError, Error);\n\nfunction peg$padEnd(str, targetLength, padString) {\n  padString = padString || \" \";\n  if (str.length > targetLength) { return str; }\n  targetLength -= str.length;\n  padString += padString.repeat(targetLength);\n  return str + padString.slice(0, targetLength);\n}\n\npeg$SyntaxError.prototype.format = function(sources) {\n  var str = \"Error: \" + this.message;\n  if (this.location) {\n    var src = null;\n    var k;\n    for (k = 0; k < sources.length; k++) {\n      if (sources[k].source === this.location.source) {\n        src = sources[k].text.split(/\\r\\n|\\n|\\r/g);\n        break;\n      }\n    }\n    var s = this.location.start;\n    var offset_s = (this.location.source && (typeof this.location.source.offset === \"function\"))\n      ? this.location.source.offset(s)\n      : s;\n    var loc = this.location.source + \":\" + offset_s.line + \":\" + offset_s.column;\n    if (src) {\n      var e = this.location.end;\n      var filler = peg$padEnd(\"\", offset_s.line.toString().length, ' ');\n      var line = src[s.line - 1];\n      var last = s.line === e.line ? e.column : line.length + 1;\n      var hatLen = (last - s.column) || 1;\n      str += \"\\n --> \" + loc + \"\\n\"\n          + filler + \" |\\n\"\n          + offset_s.line + \" | \" + line + \"\\n\"\n          + filler + \" | \" + peg$padEnd(\"\", s.column - 1, ' ')\n          + peg$padEnd(\"\", hatLen, \"^\");\n    } else {\n      str += \"\\n at \" + loc;\n    }\n  }\n  return str;\n};\n\npeg$SyntaxError.buildMessage = function(expected, found) {\n  var DESCRIBE_EXPECTATION_FNS = {\n    literal: function(expectation) {\n      return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n    },\n\n    class: function(expectation) {\n      var escapedParts = expectation.parts.map(function(part) {\n        return Array.isArray(part)\n          ? classEscape(part[0]) + \"-\" + classEscape(part[1])\n          : classEscape(part);\n      });\n\n      return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts.join(\"\") + \"]\";\n    },\n\n    any: function() {\n      return \"any character\";\n    },\n\n    end: function() {\n      return \"end of input\";\n    },\n\n    other: function(expectation) {\n      return expectation.description;\n    }\n  };\n\n  function hex(ch) {\n    return ch.charCodeAt(0).toString(16).toUpperCase();\n  }\n\n  function literalEscape(s) {\n    return s\n      .replace(/\\\\/g, \"\\\\\\\\\")\n      .replace(/\"/g,  \"\\\\\\\"\")\n      .replace(/\\0/g, \"\\\\0\")\n      .replace(/\\t/g, \"\\\\t\")\n      .replace(/\\n/g, \"\\\\n\")\n      .replace(/\\r/g, \"\\\\r\")\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return \"\\\\x0\" + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return \"\\\\x\"  + hex(ch); });\n  }\n\n  function classEscape(s) {\n    return s\n      .replace(/\\\\/g, \"\\\\\\\\\")\n      .replace(/\\]/g, \"\\\\]\")\n      .replace(/\\^/g, \"\\\\^\")\n      .replace(/-/g,  \"\\\\-\")\n      .replace(/\\0/g, \"\\\\0\")\n      .replace(/\\t/g, \"\\\\t\")\n      .replace(/\\n/g, \"\\\\n\")\n      .replace(/\\r/g, \"\\\\r\")\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return \"\\\\x0\" + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return \"\\\\x\"  + hex(ch); });\n  }\n\n  function describeExpectation(expectation) {\n    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n  }\n\n  function describeExpected(expected) {\n    var descriptions = expected.map(describeExpectation);\n    var i, j;\n\n    descriptions.sort();\n\n    if (descriptions.length > 0) {\n      for (i = 1, j = 1; i < descriptions.length; i++) {\n        if (descriptions[i - 1] !== descriptions[i]) {\n          descriptions[j] = descriptions[i];\n          j++;\n        }\n      }\n      descriptions.length = j;\n    }\n\n    switch (descriptions.length) {\n      case 1:\n        return descriptions[0];\n\n      case 2:\n        return descriptions[0] + \" or \" + descriptions[1];\n\n      default:\n        return descriptions.slice(0, -1).join(\", \")\n          + \", or \"\n          + descriptions[descriptions.length - 1];\n    }\n  }\n\n  function describeFound(found) {\n    return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n  }\n\n  return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n};\n\nfunction peg$parse(input, options) {\n  options = options !== undefined ? options : {};\n\n  var peg$FAILED = {};\n  var peg$source = options.grammarSource;\n\n  var peg$startRuleFunctions = { pgn: peg$parsepgn };\n  var peg$startRuleFunction = peg$parsepgn;\n\n  var peg$c0 = \"[\";\n  var peg$c1 = \"\\\"\";\n  var peg$c2 = \"]\";\n  var peg$c3 = \".\";\n  var peg$c4 = \"O-O-O\";\n  var peg$c5 = \"O-O\";\n  var peg$c6 = \"0-0-0\";\n  var peg$c7 = \"0-0\";\n  var peg$c8 = \"$\";\n  var peg$c9 = \"{\";\n  var peg$c10 = \"}\";\n  var peg$c11 = \";\";\n  var peg$c12 = \"(\";\n  var peg$c13 = \")\";\n  var peg$c14 = \"1-0\";\n  var peg$c15 = \"0-1\";\n  var peg$c16 = \"1/2-1/2\";\n  var peg$c17 = \"*\";\n\n  var peg$r0 = /^[a-zA-Z]/;\n  var peg$r1 = /^[^\"]/;\n  var peg$r2 = /^[0-9]/;\n  var peg$r3 = /^[.]/;\n  var peg$r4 = /^[a-zA-Z1-8\\-=]/;\n  var peg$r5 = /^[+#]/;\n  var peg$r6 = /^[!?]/;\n  var peg$r7 = /^[^}]/;\n  var peg$r8 = /^[^\\r\\n]/;\n  var peg$r9 = /^[ \\t\\r\\n]/;\n\n  var peg$e0 = peg$otherExpectation(\"tag pair\");\n  var peg$e1 = peg$literalExpectation(\"[\", false);\n  var peg$e2 = peg$literalExpectation(\"\\\"\", false);\n  var peg$e3 = peg$literalExpectation(\"]\", false);\n  var peg$e4 = peg$otherExpectation(\"tag name\");\n  var peg$e5 = peg$classExpectation([[\"a\", \"z\"], [\"A\", \"Z\"]], false, false);\n  var peg$e6 = peg$otherExpectation(\"tag value\");\n  var peg$e7 = peg$classExpectation([\"\\\"\"], true, false);\n  var peg$e8 = peg$otherExpectation(\"move number\");\n  var peg$e9 = peg$classExpectation([[\"0\", \"9\"]], false, false);\n  var peg$e10 = peg$literalExpectation(\".\", false);\n  var peg$e11 = peg$classExpectation([\".\"], false, false);\n  var peg$e12 = peg$otherExpectation(\"standard algebraic notation\");\n  var peg$e13 = peg$literalExpectation(\"O-O-O\", false);\n  var peg$e14 = peg$literalExpectation(\"O-O\", false);\n  var peg$e15 = peg$literalExpectation(\"0-0-0\", false);\n  var peg$e16 = peg$literalExpectation(\"0-0\", false);\n  var peg$e17 = peg$classExpectation([[\"a\", \"z\"], [\"A\", \"Z\"], [\"1\", \"8\"], \"-\", \"=\"], false, false);\n  var peg$e18 = peg$classExpectation([\"+\", \"#\"], false, false);\n  var peg$e19 = peg$otherExpectation(\"suffix annotation\");\n  var peg$e20 = peg$classExpectation([\"!\", \"?\"], false, false);\n  var peg$e21 = peg$otherExpectation(\"NAG\");\n  var peg$e22 = peg$literalExpectation(\"$\", false);\n  var peg$e23 = peg$otherExpectation(\"brace comment\");\n  var peg$e24 = peg$literalExpectation(\"{\", false);\n  var peg$e25 = peg$classExpectation([\"}\"], true, false);\n  var peg$e26 = peg$literalExpectation(\"}\", false);\n  var peg$e27 = peg$otherExpectation(\"rest of line comment\");\n  var peg$e28 = peg$literalExpectation(\";\", false);\n  var peg$e29 = peg$classExpectation([\"\\r\", \"\\n\"], true, false);\n  var peg$e30 = peg$otherExpectation(\"variation\");\n  var peg$e31 = peg$literalExpectation(\"(\", false);\n  var peg$e32 = peg$literalExpectation(\")\", false);\n  var peg$e33 = peg$otherExpectation(\"game termination marker\");\n  var peg$e34 = peg$literalExpectation(\"1-0\", false);\n  var peg$e35 = peg$literalExpectation(\"0-1\", false);\n  var peg$e36 = peg$literalExpectation(\"1/2-1/2\", false);\n  var peg$e37 = peg$literalExpectation(\"*\", false);\n  var peg$e38 = peg$otherExpectation(\"whitespace\");\n  var peg$e39 = peg$classExpectation([\" \", \"\\t\", \"\\r\", \"\\n\"], false, false);\n\n  var peg$f0 = function(headers, game) { return pgn(headers, game) };\n  var peg$f1 = function(tagPairs) { return Object.fromEntries(tagPairs) };\n  var peg$f2 = function(tagName, tagValue) { return [tagName, tagValue] };\n  var peg$f3 = function(root, marker) { return { root, marker} };\n  var peg$f4 = function(comment, moves) { return lineToTree(rootNode(comment), ...moves.flat()) };\n  var peg$f5 = function(san, suffix, nag, comment, variations) { return node(san, suffix, nag, comment, variations) };\n  var peg$f6 = function(nag) { return nag };\n  var peg$f7 = function(comment) { return comment.replace(/[\\r\\n]+/g, \" \") };\n  var peg$f8 = function(comment) { return comment.trim() };\n  var peg$f9 = function(line) { return line };\n  var peg$f10 = function(result, comment) { return { result, comment } };\n  var peg$currPos = options.peg$currPos | 0;\n  var peg$savedPos = peg$currPos;\n  var peg$posDetailsCache = [{ line: 1, column: 1 }];\n  var peg$maxFailPos = peg$currPos;\n  var peg$maxFailExpected = options.peg$maxFailExpected || [];\n  var peg$silentFails = options.peg$silentFails | 0;\n\n  var peg$result;\n\n  if (options.startRule) {\n    if (!(options.startRule in peg$startRuleFunctions)) {\n      throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n    }\n\n    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n  }\n\n  function text() {\n    return input.substring(peg$savedPos, peg$currPos);\n  }\n\n  function offset() {\n    return peg$savedPos;\n  }\n\n  function range() {\n    return {\n      source: peg$source,\n      start: peg$savedPos,\n      end: peg$currPos\n    };\n  }\n\n  function location() {\n    return peg$computeLocation(peg$savedPos, peg$currPos);\n  }\n\n  function expected(description, location) {\n    location = location !== undefined\n      ? location\n      : peg$computeLocation(peg$savedPos, peg$currPos);\n\n    throw peg$buildStructuredError(\n      [peg$otherExpectation(description)],\n      input.substring(peg$savedPos, peg$currPos),\n      location\n    );\n  }\n\n  function error(message, location) {\n    location = location !== undefined\n      ? location\n      : peg$computeLocation(peg$savedPos, peg$currPos);\n\n    throw peg$buildSimpleError(message, location);\n  }\n\n  function peg$literalExpectation(text, ignoreCase) {\n    return { type: \"literal\", text: text, ignoreCase: ignoreCase };\n  }\n\n  function peg$classExpectation(parts, inverted, ignoreCase) {\n    return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\n  }\n\n  function peg$anyExpectation() {\n    return { type: \"any\" };\n  }\n\n  function peg$endExpectation() {\n    return { type: \"end\" };\n  }\n\n  function peg$otherExpectation(description) {\n    return { type: \"other\", description: description };\n  }\n\n  function peg$computePosDetails(pos) {\n    var details = peg$posDetailsCache[pos];\n    var p;\n\n    if (details) {\n      return details;\n    } else {\n      if (pos >= peg$posDetailsCache.length) {\n        p = peg$posDetailsCache.length - 1;\n      } else {\n        p = pos;\n        while (!peg$posDetailsCache[--p]) {}\n      }\n\n      details = peg$posDetailsCache[p];\n      details = {\n        line: details.line,\n        column: details.column\n      };\n\n      while (p < pos) {\n        if (input.charCodeAt(p) === 10) {\n          details.line++;\n          details.column = 1;\n        } else {\n          details.column++;\n        }\n\n        p++;\n      }\n\n      peg$posDetailsCache[pos] = details;\n\n      return details;\n    }\n  }\n\n  function peg$computeLocation(startPos, endPos, offset) {\n    var startPosDetails = peg$computePosDetails(startPos);\n    var endPosDetails = peg$computePosDetails(endPos);\n\n    var res = {\n      source: peg$source,\n      start: {\n        offset: startPos,\n        line: startPosDetails.line,\n        column: startPosDetails.column\n      },\n      end: {\n        offset: endPos,\n        line: endPosDetails.line,\n        column: endPosDetails.column\n      }\n    };\n    if (offset && peg$source && (typeof peg$source.offset === \"function\")) {\n      res.start = peg$source.offset(res.start);\n      res.end = peg$source.offset(res.end);\n    }\n    return res;\n  }\n\n  function peg$fail(expected) {\n    if (peg$currPos < peg$maxFailPos) { return; }\n\n    if (peg$currPos > peg$maxFailPos) {\n      peg$maxFailPos = peg$currPos;\n      peg$maxFailExpected = [];\n    }\n\n    peg$maxFailExpected.push(expected);\n  }\n\n  function peg$buildSimpleError(message, location) {\n    return new peg$SyntaxError(message, null, null, location);\n  }\n\n  function peg$buildStructuredError(expected, found, location) {\n    return new peg$SyntaxError(\n      peg$SyntaxError.buildMessage(expected, found),\n      expected,\n      found,\n      location\n    );\n  }\n\n  function peg$parsepgn() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetagPairSection();\n    s2 = peg$parsemoveTextSection();\n    peg$savedPos = s0;\n    s0 = peg$f0(s1, s2);\n\n    return s0;\n  }\n\n  function peg$parsetagPairSection() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$parsetagPair();\n    while (s2 !== peg$FAILED) {\n      s1.push(s2);\n      s2 = peg$parsetagPair();\n    }\n    s2 = peg$parse_();\n    peg$savedPos = s0;\n    s0 = peg$f1(s1);\n\n    return s0;\n  }\n\n  function peg$parsetagPair() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parse_();\n    if (input.charCodeAt(peg$currPos) === 91) {\n      s2 = peg$c0;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e1); }\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse_();\n      s4 = peg$parsetagName();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parse_();\n        if (input.charCodeAt(peg$currPos) === 34) {\n          s6 = peg$c1;\n          peg$currPos++;\n        } else {\n          s6 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e2); }\n        }\n        if (s6 !== peg$FAILED) {\n          s7 = peg$parsetagValue();\n          if (input.charCodeAt(peg$currPos) === 34) {\n            s8 = peg$c1;\n            peg$currPos++;\n          } else {\n            s8 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$e2); }\n          }\n          if (s8 !== peg$FAILED) {\n            s9 = peg$parse_();\n            if (input.charCodeAt(peg$currPos) === 93) {\n              s10 = peg$c2;\n              peg$currPos++;\n            } else {\n              s10 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$e3); }\n            }\n            if (s10 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s0 = peg$f2(s4, s7);\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e0); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetagName() {\n    var s0, s1, s2;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = input.charAt(peg$currPos);\n    if (peg$r0.test(s2)) {\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e5); }\n    }\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = input.charAt(peg$currPos);\n        if (peg$r0.test(s2)) {\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e5); }\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      s0 = input.substring(s0, peg$currPos);\n    } else {\n      s0 = s1;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e4); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetagValue() {\n    var s0, s1, s2;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = input.charAt(peg$currPos);\n    if (peg$r1.test(s2)) {\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e7); }\n    }\n    while (s2 !== peg$FAILED) {\n      s1.push(s2);\n      s2 = input.charAt(peg$currPos);\n      if (peg$r1.test(s2)) {\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e7); }\n      }\n    }\n    s0 = input.substring(s0, peg$currPos);\n    peg$silentFails--;\n    s1 = peg$FAILED;\n    if (peg$silentFails === 0) { peg$fail(peg$e6); }\n\n    return s0;\n  }\n\n  function peg$parsemoveTextSection() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$parseline();\n    s2 = peg$parse_();\n    s3 = peg$parsegameTerminationMarker();\n    if (s3 === peg$FAILED) {\n      s3 = null;\n    }\n    s4 = peg$parse_();\n    peg$savedPos = s0;\n    s0 = peg$f3(s1, s3);\n\n    return s0;\n  }\n\n  function peg$parseline() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecomment();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    s2 = [];\n    s3 = peg$parsemove();\n    while (s3 !== peg$FAILED) {\n      s2.push(s3);\n      s3 = peg$parsemove();\n    }\n    peg$savedPos = s0;\n    s0 = peg$f4(s1, s2);\n\n    return s0;\n  }\n\n  function peg$parsemove() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;\n\n    s0 = peg$currPos;\n    s1 = peg$parse_();\n    s2 = peg$parsemoveNumber();\n    if (s2 === peg$FAILED) {\n      s2 = null;\n    }\n    s3 = peg$parse_();\n    s4 = peg$parsesan();\n    if (s4 !== peg$FAILED) {\n      s5 = peg$parsesuffixAnnotation();\n      if (s5 === peg$FAILED) {\n        s5 = null;\n      }\n      s6 = [];\n      s7 = peg$parsenag();\n      while (s7 !== peg$FAILED) {\n        s6.push(s7);\n        s7 = peg$parsenag();\n      }\n      s7 = peg$parse_();\n      s8 = peg$parsecomment();\n      if (s8 === peg$FAILED) {\n        s8 = null;\n      }\n      s9 = [];\n      s10 = peg$parsevariation();\n      while (s10 !== peg$FAILED) {\n        s9.push(s10);\n        s10 = peg$parsevariation();\n      }\n      peg$savedPos = s0;\n      s0 = peg$f5(s4, s5, s6, s8, s9);\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsemoveNumber() {\n    var s0, s1, s2, s3, s4, s5;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = input.charAt(peg$currPos);\n    if (peg$r2.test(s2)) {\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e9); }\n    }\n    while (s2 !== peg$FAILED) {\n      s1.push(s2);\n      s2 = input.charAt(peg$currPos);\n      if (peg$r2.test(s2)) {\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e9); }\n      }\n    }\n    if (input.charCodeAt(peg$currPos) === 46) {\n      s2 = peg$c3;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e10); }\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse_();\n      s4 = [];\n      s5 = input.charAt(peg$currPos);\n      if (peg$r3.test(s5)) {\n        peg$currPos++;\n      } else {\n        s5 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e11); }\n      }\n      while (s5 !== peg$FAILED) {\n        s4.push(s5);\n        s5 = input.charAt(peg$currPos);\n        if (peg$r3.test(s5)) {\n          peg$currPos++;\n        } else {\n          s5 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e11); }\n        }\n      }\n      s1 = [s1, s2, s3, s4];\n      s0 = s1;\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e8); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsesan() {\n    var s0, s1, s2, s3, s4, s5;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    if (input.substr(peg$currPos, 5) === peg$c4) {\n      s2 = peg$c4;\n      peg$currPos += 5;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e13); }\n    }\n    if (s2 === peg$FAILED) {\n      if (input.substr(peg$currPos, 3) === peg$c5) {\n        s2 = peg$c5;\n        peg$currPos += 3;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e14); }\n      }\n      if (s2 === peg$FAILED) {\n        if (input.substr(peg$currPos, 5) === peg$c6) {\n          s2 = peg$c6;\n          peg$currPos += 5;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e15); }\n        }\n        if (s2 === peg$FAILED) {\n          if (input.substr(peg$currPos, 3) === peg$c7) {\n            s2 = peg$c7;\n            peg$currPos += 3;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$e16); }\n          }\n          if (s2 === peg$FAILED) {\n            s2 = peg$currPos;\n            s3 = input.charAt(peg$currPos);\n            if (peg$r0.test(s3)) {\n              peg$currPos++;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$e5); }\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = [];\n              s5 = input.charAt(peg$currPos);\n              if (peg$r4.test(s5)) {\n                peg$currPos++;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$e17); }\n              }\n              if (s5 !== peg$FAILED) {\n                while (s5 !== peg$FAILED) {\n                  s4.push(s5);\n                  s5 = input.charAt(peg$currPos);\n                  if (peg$r4.test(s5)) {\n                    peg$currPos++;\n                  } else {\n                    s5 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$e17); }\n                  }\n                }\n              } else {\n                s4 = peg$FAILED;\n              }\n              if (s4 !== peg$FAILED) {\n                s3 = [s3, s4];\n                s2 = s3;\n              } else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          }\n        }\n      }\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = input.charAt(peg$currPos);\n      if (peg$r5.test(s3)) {\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e18); }\n      }\n      if (s3 === peg$FAILED) {\n        s3 = null;\n      }\n      s2 = [s2, s3];\n      s1 = s2;\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      s0 = input.substring(s0, peg$currPos);\n    } else {\n      s0 = s1;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e12); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsesuffixAnnotation() {\n    var s0, s1, s2;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = input.charAt(peg$currPos);\n    if (peg$r6.test(s2)) {\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e20); }\n    }\n    while (s2 !== peg$FAILED) {\n      s1.push(s2);\n      if (s1.length >= 2) {\n        s2 = peg$FAILED;\n      } else {\n        s2 = input.charAt(peg$currPos);\n        if (peg$r6.test(s2)) {\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e20); }\n        }\n      }\n    }\n    if (s1.length < 1) {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    } else {\n      s0 = s1;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e19); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsenag() {\n    var s0, s1, s2, s3, s4, s5;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parse_();\n    if (input.charCodeAt(peg$currPos) === 36) {\n      s2 = peg$c8;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e22); }\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = peg$currPos;\n      s4 = [];\n      s5 = input.charAt(peg$currPos);\n      if (peg$r2.test(s5)) {\n        peg$currPos++;\n      } else {\n        s5 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e9); }\n      }\n      if (s5 !== peg$FAILED) {\n        while (s5 !== peg$FAILED) {\n          s4.push(s5);\n          s5 = input.charAt(peg$currPos);\n          if (peg$r2.test(s5)) {\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$e9); }\n          }\n        }\n      } else {\n        s4 = peg$FAILED;\n      }\n      if (s4 !== peg$FAILED) {\n        s3 = input.substring(s3, peg$currPos);\n      } else {\n        s3 = s4;\n      }\n      if (s3 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s0 = peg$f6(s3);\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e21); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomment() {\n    var s0;\n\n    s0 = peg$parsebraceComment();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parserestOfLineComment();\n    }\n\n    return s0;\n  }\n\n  function peg$parsebraceComment() {\n    var s0, s1, s2, s3, s4;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 123) {\n      s1 = peg$c9;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e24); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      s3 = [];\n      s4 = input.charAt(peg$currPos);\n      if (peg$r7.test(s4)) {\n        peg$currPos++;\n      } else {\n        s4 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e25); }\n      }\n      while (s4 !== peg$FAILED) {\n        s3.push(s4);\n        s4 = input.charAt(peg$currPos);\n        if (peg$r7.test(s4)) {\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e25); }\n        }\n      }\n      s2 = input.substring(s2, peg$currPos);\n      if (input.charCodeAt(peg$currPos) === 125) {\n        s3 = peg$c10;\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e26); }\n      }\n      if (s3 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s0 = peg$f7(s2);\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e23); }\n    }\n\n    return s0;\n  }\n\n  function peg$parserestOfLineComment() {\n    var s0, s1, s2, s3, s4;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 59) {\n      s1 = peg$c11;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e28); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      s3 = [];\n      s4 = input.charAt(peg$currPos);\n      if (peg$r8.test(s4)) {\n        peg$currPos++;\n      } else {\n        s4 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e29); }\n      }\n      while (s4 !== peg$FAILED) {\n        s3.push(s4);\n        s4 = input.charAt(peg$currPos);\n        if (peg$r8.test(s4)) {\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e29); }\n        }\n      }\n      s2 = input.substring(s2, peg$currPos);\n      peg$savedPos = s0;\n      s0 = peg$f8(s2);\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e27); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsevariation() {\n    var s0, s1, s2, s3, s4, s5;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parse_();\n    if (input.charCodeAt(peg$currPos) === 40) {\n      s2 = peg$c12;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e31); }\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parseline();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parse_();\n        if (input.charCodeAt(peg$currPos) === 41) {\n          s5 = peg$c13;\n          peg$currPos++;\n        } else {\n          s5 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e32); }\n        }\n        if (s5 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f9(s3);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e30); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsegameTerminationMarker() {\n    var s0, s1, s2, s3;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3) === peg$c14) {\n      s1 = peg$c14;\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e34); }\n    }\n    if (s1 === peg$FAILED) {\n      if (input.substr(peg$currPos, 3) === peg$c15) {\n        s1 = peg$c15;\n        peg$currPos += 3;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e35); }\n      }\n      if (s1 === peg$FAILED) {\n        if (input.substr(peg$currPos, 7) === peg$c16) {\n          s1 = peg$c16;\n          peg$currPos += 7;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e36); }\n        }\n        if (s1 === peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 42) {\n            s1 = peg$c17;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$e37); }\n          }\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n      s3 = peg$parsecomment();\n      if (s3 === peg$FAILED) {\n        s3 = null;\n      }\n      peg$savedPos = s0;\n      s0 = peg$f10(s1, s3);\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e33); }\n    }\n\n    return s0;\n  }\n\n  function peg$parse_() {\n    var s0, s1;\n\n    peg$silentFails++;\n    s0 = [];\n    s1 = input.charAt(peg$currPos);\n    if (peg$r9.test(s1)) {\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e39); }\n    }\n    while (s1 !== peg$FAILED) {\n      s0.push(s1);\n      s1 = input.charAt(peg$currPos);\n      if (peg$r9.test(s1)) {\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e39); }\n      }\n    }\n    peg$silentFails--;\n    s1 = peg$FAILED;\n    if (peg$silentFails === 0) { peg$fail(peg$e38); }\n\n    return s0;\n  }\n\n  peg$result = peg$startRuleFunction();\n\n  if (options.peg$library) {\n    return /** @type {any} */ ({\n      peg$result,\n      peg$currPos,\n      peg$FAILED,\n      peg$maxFailExpected,\n      peg$maxFailPos\n    });\n  }\n  if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n    return peg$result;\n  } else {\n    if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n      peg$fail(peg$endExpectation());\n    }\n\n    throw peg$buildStructuredError(\n      peg$maxFailExpected,\n      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n      peg$maxFailPos < input.length\n        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n    );\n  }\n}\n\nconst peg$allowedStartRules = [\n  \"pgn\"\n];\n\nexport {\n  peg$allowedStartRules as StartRules,\n  peg$SyntaxError as SyntaxError,\n  peg$parse as parse\n};\n",""],"mappings":"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CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,CAAC,EAChD,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAChD,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAChD,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAChD,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAChD,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,EAAE,EAAG,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAChD,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACjD,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAG,CAAC,EAAE,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAChD,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,EAAE,EAAG,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAChD,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAChD,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAChD,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAChD,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EACjD,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,GAC7C;AAED;AACA,MAAMC,IAAI,GAAG,CACV,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAE,CAAC,EAC5D,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,CAAC,EAC5D,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAE,CAAC,EAC5D,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,CAAC,EAC5D,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,CAAC,EAC5D,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,CAAC,EAC5D,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,CAAC,EAC5D,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAG,EAAE,EAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAC5D,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,CAAC,EAC5D,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAC,GAAG,EAAG,CAAC,EAAC,GAAG,EAAG,CAAC,EAAC,GAAG,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,CAAC,EAC5D,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAC,GAAG,EAAG,CAAC,EAAG,CAAC,EAAC,GAAG,EAAG,CAAC,EAAG,CAAC,EAAC,GAAG,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,CAAC,EAC5D,CAAC,EAAG,CAAC,EAAG,CAAC,EAAC,GAAG,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAC,GAAG,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAC,GAAG,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,CAAC,EAC5D,CAAC,EAAG,CAAC,EAAC,GAAG,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAC,GAAG,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAC,GAAG,EAAG,CAAC,EAAG,CAAC,EAAE,CAAC,EAC5D,CAAC,EAAC,GAAG,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAC,GAAG,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAC,GAAG,EAAG,CAAC,EAAE,CAAC,EAC9D,GAAG,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAC,GAAG,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}